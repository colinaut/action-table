{"version":3,"file":"action-table-pagination.js","sources":["../src/action-table-pagination-options.ts","../src/action-table-pagination.ts"],"sourcesContent":["import type { ActionTable } from \"./action-table\";\n\nexport class ActionTablePaginationOptions extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t\tconst actionTable = this.closest(\"action-table\") as ActionTable;\n\t\tconst { pagination } = actionTable;\n\t\tconst paginationOptions = (options: number[]) => options.map((opt) => `<option ${pagination === opt ? `selected` : ``}>${opt}</option>`).join(\"\");\n\n\t\tconst paginationSelect =\n\t\t\tthis.options.length > 0\n\t\t\t\t? `<label class=\"pagination-select\"><span>${this.getAttribute(\"label\") || \"Rows per:\"}</span> <select>${paginationOptions(this.options)}</select></label>`\n\t\t\t\t: \"\";\n\n\t\tthis.innerHTML = paginationSelect;\n\t\tthis.addEventListener(\"change\", (e) => {\n\t\t\tif (e.target instanceof HTMLSelectElement) {\n\t\t\t\tconst value = Number(e.target.value);\n\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\tactionTable.pagination = value;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tget options(): number[] {\n\t\tconst options = this.getAttribute(\"options\");\n\t\tif (options) {\n\t\t\tconst paginationArray = options\n\t\t\t\t.split(\",\")\n\t\t\t\t.map((item) => Number(item))\n\t\t\t\t.filter((p) => !isNaN(p));\n\t\t\tif (paginationArray.length > 0) {\n\t\t\t\treturn paginationArray;\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n}\n\ncustomElements.define(\"action-table-pagination-options\", ActionTablePaginationOptions);\n","import type { ActionTable } from \"./action-table\";\nimport \"./action-table-pagination-options\";\n\nexport class ActionTablePagination extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.addEventListeners();\n\t}\n\n\tprivate page = 1;\n\tprivate numberOfPages = 1;\n\tprivate group = 1;\n\tprivate maxGroups = 1;\n\tprivate actionTable = this.closest(\"action-table\") as ActionTable;\n\n\tpublic connectedCallback(): void {\n\t\tthis.render();\n\t}\n\n\tpublic render() {\n\t\tconsole.log(\"render pagination\");\n\n\t\tconst { page, numberOfPages } = this.actionTable;\n\t\t// reassign number of pages based on this.actionTable\n\t\tthis.numberOfPages = numberOfPages;\n\t\tthis.page = page;\n\t\t// temporarily local variables\n\t\tconst maxButtons = Number(this.getAttribute(\"max-buttons\")) || 10;\n\t\tconst maxGroups = Math.ceil(numberOfPages / maxButtons); // reassign to this at end of render\n\t\tlet group = this.group; // reassign to this at end of render\n\n\t\tif (group > maxGroups) {\n\t\t\tgroup = maxGroups;\n\t\t} else if (group < 1) {\n\t\t\tgroup = 1;\n\t\t}\n\n\t\tconst startIndex = (group - 1) * maxButtons + 1;\n\n\t\t/* -------------------------------------------------------------------------- */\n\t\t/*                             Render the buttons                             */\n\t\t/* -------------------------------------------------------------------------- */\n\n\t\t/* ----------------------------- Button strings ----------------------------- */\n\t\tfunction pageButton(i: number, className: string = \"\", text?: string): string {\n\t\t\treturn `<button type=\"button\" class=\"${page === i ? `active ${className}` : `${className}`}\" data-page=\"${i}\" title=\"${className}\">${text || i}</button>`;\n\t\t}\n\n\t\t/* -------------------------- Start making buttons -------------------------- */\n\n\t\tlet paginatedButtons = \"\";\n\n\t\tif (group > 1) {\n\t\t\tpaginatedButtons += `${pageButton(1, \"first\")}${pageButton(startIndex - 1, \"prev\", \"...\")}`;\n\t\t}\n\n\t\tif (numberOfPages > 0) {\n\t\t\t// for looping through the number of pages\n\t\t\tfor (let i = startIndex; i <= numberOfPages; i++) {\n\t\t\t\t// code to handle each page\n\t\t\t\tpaginatedButtons += pageButton(i);\n\t\t\t\tif (i !== numberOfPages && i >= maxButtons * group) {\n\t\t\t\t\tpaginatedButtons += `${pageButton(i + 1, \"next\", \"...\")}${pageButton(numberOfPages, \"last\")}`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst classAttr = (suffix: string) => ` class=\"pagination-${suffix}\"`;\n\n\t\tthis.innerHTML = `<span${classAttr(\"label\")}></span> <span${classAttr(\"buttons\")}>${paginatedButtons}</span>`;\n\t\tthis.changeLabel(page);\n\n\t\t// assign temporary variables back to this\n\t\tthis.group = group;\n\t\tthis.maxGroups = maxGroups;\n\t}\n\n\tprivate changeLabel(page: number) {\n\t\tconst { pagination, rowsSet } = this.actionTable;\n\n\t\tconst label = this.getAttribute(\"label\") || \"Showing {rows} of {total}:\";\n\n\t\tconst labelStr = label.replace(\"{rows}\", `${page * pagination - pagination + 1}-${page * pagination}`).replace(\"{total}\", `${rowsSet.size}`);\n\n\t\tconst labelSpan = this.querySelector(\"span.pagination-label\");\n\t\tif (labelSpan) labelSpan.textContent = labelStr;\n\t}\n\n\tprivate addEventListeners(): void {\n\t\tthis.addEventListener(\"click\", (event) => {\n\t\t\tconst target = event.target;\n\t\t\tif (target instanceof HTMLButtonElement) {\n\t\t\t\t// temp variable\n\t\t\t\t// must trigger action-table page change if it changes\n\t\t\t\tlet page: number = 1;\n\n\t\t\t\tif (target.dataset.page) {\n\t\t\t\t\t// set the current page before setting the current page on the action table so that it doesn't rerender when setProps is returned\n\t\t\t\t\tpage = Number(target.dataset.page);\n\n\t\t\t\t\ttarget.classList.add(\"active\");\n\t\t\t\t\tthis.querySelectorAll(\"button\").forEach((button) => {\n\t\t\t\t\t\tif (button !== target) {\n\t\t\t\t\t\t\tbutton.classList.remove(\"active\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// temp variables\n\t\t\t\t// Must rerender if the group changes\n\t\t\t\tlet group = this.group;\n\n\t\t\t\tconst hasClass = (className: string) => {\n\t\t\t\t\treturn target.classList.contains(className);\n\t\t\t\t};\n\t\t\t\tif (hasClass(\"next\")) {\n\t\t\t\t\tgroup++;\n\t\t\t\t}\n\t\t\t\tif (hasClass(\"prev\")) {\n\t\t\t\t\tgroup--;\n\t\t\t\t}\n\t\t\t\tif (hasClass(\"first\")) {\n\t\t\t\t\tgroup = 1;\n\t\t\t\t}\n\t\t\t\tif (hasClass(\"last\")) {\n\t\t\t\t\tgroup = this.maxGroups;\n\t\t\t\t}\n\n\t\t\t\tthis.actionTable.page = this.page = page;\n\t\t\t\tthis.changeLabel(page);\n\n\t\t\t\tif (this.group !== group) {\n\t\t\t\t\tthis.group = group;\n\t\t\t\t\tthis.render();\n\t\t\t\t}\n\t\t\t\t// }\n\t\t\t}\n\t\t});\n\n\t\tthis.actionTable.addEventListener(\"action-table\", (e) => {\n\t\t\tconst { page, pagination, numberOfPages } = e.detail;\n\t\t\tconsole.log(\"action-table pagination\", e.detail);\n\t\t\tif ((page && page !== this.page) || (numberOfPages !== undefined && numberOfPages !== this.numberOfPages) || pagination !== undefined) {\n\t\t\t\tconsole.log(\"action-table pagination render\", page, this.page, pagination, numberOfPages, this.numberOfPages);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t});\n\t}\n}\n\ncustomElements.define(\"action-table-pagination\", ActionTablePagination);\n"],"names":["ActionTablePaginationOptions","actionTable","pagination","paginationOptions","options","opt","paginationSelect","e","value","paginationArray","item","p","ActionTablePagination","__publicField","page","numberOfPages","maxButtons","maxGroups","group","startIndex","pageButton","i","className","text","paginatedButtons","classAttr","suffix","rowsSet","labelStr","labelSpan","event","target","button","hasClass"],"mappings":"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"}