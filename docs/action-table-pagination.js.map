{"version":3,"file":"action-table-pagination.js","sources":["../src/action-table-pagination.ts"],"sourcesContent":["import type { ActionTable } from \"./action-table\";\nimport { PaginationProps } from \"./types\";\nexport class ActionTablePagination extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.addEventListeners();\n\t}\n\n\tprivate buttonGroup = 1;\n\tpublic page = 1;\n\tpublic pagination = 0;\n\tpublic rowsShown = 0;\n\tprivate maxButtonGroups = 1;\n\n\tpublic connectedCallback(): void {\n\t\tconst actionTable = this.closest(\"action-table\") as ActionTable;\n\t\tthis.pagination = actionTable.pagination;\n\t\tthis.page = actionTable.page;\n\t\tthis.rowsShown = actionTable.rowsShown;\n\t\tthis.render();\n\t}\n\n\tget maxButtons(): number {\n\t\treturn Number(this.getAttribute(\"max-buttons\")) || 10;\n\t}\n\n\tpublic setProps(props: PaginationProps) {\n\t\tconst { page, rowsShown } = props;\n\t\tconsole.log(\"setProps\", { page, rowsShown });\n\n\t\tlet triggerRender = false;\n\t\tif (page !== undefined && page !== this.page) {\n\t\t\tthis.page = page;\n\t\t\ttriggerRender = true;\n\t\t}\n\t\tif (rowsShown !== undefined && rowsShown !== this.rowsShown) {\n\t\t\tthis.rowsShown = rowsShown;\n\t\t\ttriggerRender = true;\n\t\t}\n\n\t\tif (triggerRender) {\n\t\t\tthis.render();\n\t\t}\n\t}\n\n\t// TODO: clean this up\n\tpublic render() {\n\t\tconst { page, pagination, rowsShown } = this;\n\t\tconsole.log(\"rendering pagination\", { page, pagination, rowsShown });\n\n\t\t// temporarily local variables\n\t\tconst maxButtons = this.maxButtons;\n\t\tconst numberOfButtons = Math.ceil(rowsShown / pagination);\n\t\tconst maxButtonGroups = Math.ceil(numberOfButtons / maxButtons); // reassign to this at end of render\n\t\tlet buttonGroup = this.buttonGroup; // reassign to this at end of render\n\n\t\tif (buttonGroup > maxButtonGroups) {\n\t\t\tbuttonGroup = maxButtonGroups;\n\t\t} else if (buttonGroup < 1) {\n\t\t\tbuttonGroup = 1;\n\t\t}\n\n\t\tconst startIndex = (buttonGroup - 1) * maxButtons + 1;\n\n\t\t/* -------------------------------------------------------------------------- */\n\t\t/*                             Render the buttons                             */\n\t\t/* -------------------------------------------------------------------------- */\n\n\t\t/* ----------------------------- Button strings ----------------------------- */\n\t\tconst buttonStart = `<button type=\"button\" class=\"`;\n\n\t\tfunction pageButton(i: number, className: string = \"\"): string {\n\t\t\treturn `${buttonStart}${page === i ? `active ${className}` : `${className}`}\" data-page=\"${i}\">${i}</button>`;\n\t\t}\n\n\t\tfunction paginationButton(className: string, title: number): string {\n\t\t\treturn `${buttonStart}${className}\" title=\"${title}\">...</button>`;\n\t\t}\n\n\t\t/* -------------------------- Start making buttons -------------------------- */\n\n\t\tlet paginatedButtons = \"\";\n\n\t\tif (buttonGroup > 1) {\n\t\t\tpaginatedButtons += `${pageButton(1, \"first\")}${paginationButton(\"prev\", startIndex - 1)}`;\n\t\t}\n\n\t\tif (rowsShown > 0) {\n\t\t\t// for looping through the number of pages\n\t\t\tfor (let i = startIndex; i <= numberOfButtons; i++) {\n\t\t\t\t// code to handle each page\n\t\t\t\tpaginatedButtons += pageButton(i);\n\t\t\t\tif (i !== numberOfButtons && i >= maxButtons * buttonGroup) {\n\t\t\t\t\tpaginatedButtons += `${paginationButton(\"next\", i + 1)}${pageButton(numberOfButtons, \"last\")}`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.innerHTML = `<span class=\"pagination-title\">Pagination:</span> ${paginatedButtons}`;\n\n\t\t// assign temporary variables back to this\n\t\tthis.buttonGroup = buttonGroup;\n\t\tthis.maxButtonGroups = maxButtonGroups;\n\t}\n\n\tprivate addEventListeners(): void {\n\t\tthis.addEventListener(\"click\", (event) => {\n\t\t\tconst target = event.target as HTMLInputElement;\n\n\t\t\tif (target.tagName.toLowerCase() === \"button\") {\n\t\t\t\t// temp variable\n\t\t\t\t// must trigger action-table page change if it changes\n\t\t\t\tlet page = this.page;\n\n\t\t\t\tif (target.dataset.page) {\n\t\t\t\t\t// set the current page before setting the current page on the action table so that it doesn't rerender when setProps is returned\n\t\t\t\t\tpage = Number(target.dataset.page);\n\n\t\t\t\t\ttarget.classList.add(\"active\");\n\t\t\t\t\tthis.querySelectorAll(\"button\").forEach((button) => {\n\t\t\t\t\t\tif (button !== target) {\n\t\t\t\t\t\t\tbutton.classList.remove(\"active\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// TODO: simplify this\n\t\t\t\t// temp variable\n\t\t\t\t// Must rerender if the buttonGroup changes\n\t\t\t\tlet buttonGroup = this.buttonGroup;\n\t\t\t\tif (target.classList.contains(\"next\")) {\n\t\t\t\t\tpage = buttonGroup * this.maxButtons + 1;\n\t\t\t\t\tbuttonGroup++;\n\t\t\t\t}\n\t\t\t\tif (target.classList.contains(\"prev\")) {\n\t\t\t\t\tbuttonGroup--;\n\t\t\t\t\tpage = buttonGroup * this.maxButtons;\n\t\t\t\t}\n\t\t\t\tif (target.classList.contains(\"first\")) {\n\t\t\t\t\tbuttonGroup = 1;\n\t\t\t\t}\n\t\t\t\tif (target.classList.contains(\"last\")) {\n\t\t\t\t\tbuttonGroup = this.maxButtonGroups;\n\t\t\t\t}\n\t\t\t\tif (this.page !== page) {\n\t\t\t\t\tthis.page = page;\n\t\t\t\t\tconst actionTable = this.closest(\"action-table\") as ActionTable;\n\t\t\t\t\tactionTable.page = this.page;\n\t\t\t\t}\n\t\t\t\tif (this.buttonGroup !== buttonGroup) {\n\t\t\t\t\tthis.buttonGroup = buttonGroup;\n\t\t\t\t\tthis.render();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\ncustomElements.define(\"action-table-pagination\", ActionTablePagination);\n"],"names":["ActionTablePagination","__publicField","actionTable","props","page","rowsShown","triggerRender","pagination","maxButtons","numberOfButtons","maxButtonGroups","buttonGroup","startIndex","buttonStart","pageButton","className","paginationButton","title","paginatedButtons","event","target","button"],"mappings":"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"}