{"version":3,"file":"action-table.js","sources":["../src/action-table.ts"],"sourcesContent":["export class ActionTable extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// TODO: review if I really need all of these variables\n\tprivate tbody!: HTMLTableSectionElement;\n\tprivate ths!: NodeListOf<HTMLTableCellElement>;\n\tprivate cols: { name: string; index: number; filter?: string }[] = [];\n\tprivate rowsArray!: Array<HTMLTableRowElement>;\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                                 Attributes                                 */\n\t/* -------------------------------------------------------------------------- */\n\n\tstatic get observedAttributes(): string[] {\n\t\treturn [\"sort\", \"direction\"];\n\t}\n\n\tget sort(): string {\n\t\treturn this.getAttribute(\"sort\")?.trim().toLowerCase() || \"\";\n\t}\n\tset sort(value: string) {\n\t\tthis.setAttribute(\"sort\", value);\n\t}\n\tget direction(): string {\n\t\treturn this.getAttribute(\"direction\")?.trim().toLowerCase() || \"ascending\";\n\t}\n\tset direction(value: string) {\n\t\tthis.setAttribute(\"direction\", value);\n\t}\n\n\tpublic connectedCallback(): void {\n\t\tconst table = this.querySelector(\"table\") as HTMLTableElement;\n\n\t\tthis.tbody = table.querySelector(\"tbody\") as HTMLTableSectionElement;\n\n\t\tthis.getColumns(table);\n\n\t\tconst rows = this.tbody.querySelectorAll(\"tbody tr\") as NodeListOf<HTMLTableRowElement>;\n\t\tthis.rowsArray = Array.from(rows);\n\n\t\t/* ----------------- Sort Table Element if attribute is set ----------------- */\n\t\tif (this.sort) {\n\t\t\tthis.sortTable();\n\t\t}\n\n\t\tthis.addEventListeners();\n\t}\n\n\tprivate getColumns(table: HTMLTableElement): Array<{ name: string; index: number; filter?: string }> {\n\t\tthis.ths = table.querySelectorAll(\"th\");\n\t\tif (this.ths) {\n\t\t\tthis.ths.forEach((th) => {\n\t\t\t\t// Column name is based on data-col attribute or innerText\n\t\t\t\tlet name = th.dataset.col || th.innerText || \"\";\n\t\t\t\tname = name.trim().toLowerCase();\n\t\t\t\tif (name) {\n\t\t\t\t\tthis.cols.push({ name: name, index: th.cellIndex });\n\t\t\t\t\tif (th.dataset.sortable !== \"false\") th.dataset.sortable = \"true\";\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconsole.log(\"action-table cols\", this.cols);\n\t\treturn this.cols;\n\t}\n\n\tpublic attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t\tconsole.log(\"changed\", name, oldValue, newValue);\n\t}\n\n\tprivate addEventListeners(): void {\n\t\tthis.addEventListener(\n\t\t\t\"click\",\n\t\t\t(event) => {\n\t\t\t\tconst el = event.target as HTMLTableCellElement;\n\t\t\t\tif (el.tagName === \"TH\") {\n\t\t\t\t\tif (el.dataset.sortable === \"false\") return;\n\t\t\t\t\tlet name = el.dataset.col || el.innerText || \"\";\n\t\t\t\t\tname = name.trim().toLowerCase();\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tif (this.sort === name && this.direction === \"ascending\") {\n\t\t\t\t\t\t\tthis.direction = \"descending\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.sort = name;\n\t\t\t\t\t\t\tthis.direction = \"ascending\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.sortTable();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\n\t\t// Add listener for custom event \"action-table-filter\" which logs the event detail\n\t\tthis.addEventListener(\"action-table-filter\", (event) => {\n\t\t\tconst { col, value } = (<CustomEvent>event).detail;\n\t\t\tconsole.log(`Filter ${col} to ${value}`);\n\t\t\tthis.filterTable(col, value);\n\t\t});\n\n\t\tthis.addEventListener(\"action-table-filter-reset\", () => {\n\t\t\tthis.resetFilters();\n\t\t});\n\t}\n\n\tpublic resetFilters(): void {\n\t\t// remove all filters from this.col then call filterTable\n\t\tthis.cols.forEach((col) => {\n\t\t\tcol.filter = \"\";\n\t\t});\n\t\tthis.filterTable();\n\t}\n\n\tpublic filterTable(col = \"\", value = \"\", regexOpt = \"i\"): void {\n\t\tcol = col?.trim().toLowerCase();\n\t\tif (typeof value === \"string\") {\n\t\t\tvalue = value.trim();\n\t\t}\n\t\t// Add filter to cols array\n\t\t// if value = \"\" that resets the filter for that column\n\t\tthis.cols = this.cols.map((c) => {\n\t\t\tif (c.name === col) {\n\t\t\t\tc.filter = value;\n\t\t\t}\n\t\t\treturn c;\n\t\t});\n\n\t\t// Filter based on filter value\n\t\tthis.rowsArray.forEach((row) => {\n\t\t\trow.style.display = \"\";\n\t\t\tconst cells = row.children as HTMLCollectionOf<HTMLElement>;\n\t\t\tthis.cols.forEach((col) => {\n\t\t\t\tconst cell = cells[col.index] as HTMLTableCellElement;\n\t\t\t\tconst content = this.getCellContent(cell).toString();\n\t\t\t\tif (col.filter && typeof col.filter === \"string\") {\n\t\t\t\t\tconst regex = new RegExp(col.filter, regexOpt);\n\t\t\t\t\tif (regex.test(content)) {\n\t\t\t\t\t\t// row.style.display = \"table-row\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow.style.display = \"none\";\n\t\t\t\t\t}\n\t\t\t\t} else if (col.filter && Array.isArray(col.filter)) {\n\t\t\t\t\tconst filterArray = col.filter as string[];\n\t\t\t\t\tlet regexString = \"(\";\n\t\t\t\t\tfilterArray.forEach((value, i) => {\n\t\t\t\t\t\tregexString += `${value}`;\n\t\t\t\t\t\tregexString += i < filterArray.length - 1 ? \"|\" : \"\";\n\t\t\t\t\t});\n\t\t\t\t\tregexString += \")\";\n\t\t\t\t\tconst regex = new RegExp(regexString, regexOpt);\n\t\t\t\t\tif (regex.test(content)) {\n\t\t\t\t\t\t// row.style.display = \"table-row\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow.style.display = \"none\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.sortTable();\n\t}\n\n\tprivate getCellContent(cell: HTMLTableCellElement): string | number {\n\t\tlet cellContent: string | number = cell.dataset.sort || cell.innerText || \"\";\n\t\t// trim to make sure it's not just spaces\n\t\tcellContent = cellContent?.trim();\n\n\t\tif (!cellContent) {\n\t\t\tconst el = cell.firstElementChild as HTMLElement;\n\t\t\tif (el.tagName.toLowerCase() === \"svg\") {\n\t\t\t\tcellContent = el.querySelector(\"title\")?.textContent || \"\";\n\t\t\t}\n\t\t\tinterface Switch extends HTMLElement {\n\t\t\t\tchecked: boolean;\n\t\t\t}\n\t\t\tif (el.tagName.toLowerCase() === \"action-table-switch\" || el.tagName.toLowerCase() === \"input\") {\n\t\t\t\tconst actionSwitch = el as Switch;\n\t\t\t\tcellContent = actionSwitch.checked ? \"checked\" : \"\";\n\t\t\t}\n\t\t}\n\t\tcellContent = Number(cellContent) ? Number(cellContent) : cellContent.trim();\n\t\treturn cellContent;\n\t}\n\n\tsortTable(sort = this.sort, direction = this.direction) {\n\t\tsort = sort?.trim().toLowerCase();\n\t\tdirection = direction?.trim().toLowerCase();\n\t\t// Get column index from column name\n\t\tconst column_index = this.cols.findIndex((c) => c.name === sort);\n\t\t// Sort\n\t\tif (column_index >= 0 && this.rowsArray.length > 0) {\n\t\t\tconsole.log(`sort by ${sort} ${direction}`);\n\n\t\t\tthis.rowsArray.sort((r1, r2) => {\n\t\t\t\tconst c1 = r1.children[column_index] as HTMLTableCellElement;\n\t\t\t\tconst c2 = r2.children[column_index] as HTMLTableCellElement;\n\t\t\t\tlet v1 = this.getCellContent(c1);\n\t\t\t\tlet v2 = this.getCellContent(c2);\n\n\t\t\t\tif (this.direction === \"ascending\") {\n\t\t\t\t\tif (v1 < v2) return -1;\n\t\t\t\t\tif (v1 > v2) return 1;\n\t\t\t\t} else {\n\t\t\t\t\tif (v1 < v2) return 1;\n\t\t\t\t\tif (v1 > v2) return -1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\n\t\t\t// Remove \"sorted\" and direction classes from all th and add for sorted column\n\t\t\tthis.ths.forEach((th) => {\n\t\t\t\tth.dataset.sort_direction = \"\";\n\t\t\t\tif (th.dataset.sort === sort || th.innerText?.trim().toLowerCase() === sort) {\n\t\t\t\t\tth.dataset.sort_direction = direction;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.rowsArray.forEach((row) => this.tbody.appendChild(row));\n\t\t}\n\t}\n}\n\ncustomElements.define(\"action-table\", ActionTable);\n"],"names":["ActionTable","__publicField","_a","value","table","rows","th","name","oldValue","newValue","event","el","col","regexOpt","c","row","cells","cell","content","filterArray","regexString","i","cellContent","sort","direction","column_index","r1","r2","c1","c2","v1","v2"],"mappings":"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"}