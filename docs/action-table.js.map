{"version":3,"file":"action-table.js","sources":["../src/action-table.ts"],"sourcesContent":["import { ColsArray, FiltersObject, SingleFilterObject, ActionCell, ActionRow, PaginationProps } from \"./types\";\nimport type { ActionTableFilters } from \"./action-table-filters\";\nimport type { ActionTablePagination } from \"./action-table-pagination\";\nexport class ActionTable extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/* -------------------------------------------------------------------------- */\n\t\t/*                                    Init                                    */\n\t\t/* -------------------------------------------------------------------------- */\n\t\t/* ------------------- Only fires once on js initial load ------------------- */\n\t\t/* --------------- Does not require the inner DOM to be ready --------------- */\n\n\t\t// 1. set initial values\n\t\tthis.direction = \"ascending\";\n\n\t\t// 2. Add Event Listeners (loading them here means I don't need disconnectedCallback)\n\t\tthis.addEventListeners();\n\t}\n\n\tpublic tbody!: HTMLTableSectionElement;\n\tpublic thead!: HTMLTableSectionElement;\n\tprivate tfoot!: HTMLTableSectionElement;\n\tprivate ths!: NodeListOf<HTMLTableCellElement>;\n\tpublic cols: ColsArray = [];\n\tpublic filters: FiltersObject = {};\n\tpublic rowsArray!: Array<ActionRow>;\n\tprivate ready = false;\n\tprivate colGroupCols!: NodeListOf<HTMLTableColElement>;\n\tpublic rowsShown = 0;\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                                 Attributes                                 */\n\t/* -------------------------------------------------------------------------- */\n\n\tstatic get observedAttributes(): string[] {\n\t\treturn [\"sort\", \"direction\", \"page\", \"pagination\"];\n\t}\n\n\t// sort attribute to set the sort column\n\n\tget sort(): string {\n\t\treturn this.getAttribute(\"sort\")?.trim().toLowerCase() || \"\";\n\t}\n\tset sort(value: string) {\n\t\tthis.setAttribute(\"sort\", value);\n\t}\n\n\t// direction attribute to set the sort direction\n\tget direction(): \"ascending\" | \"descending\" {\n\t\tconst direction = this.getAttribute(\"direction\")?.trim().toLowerCase();\n\t\tif (direction === \"ascending\" || direction === \"descending\") {\n\t\t\treturn direction;\n\t\t}\n\t\treturn \"ascending\";\n\t}\n\tset direction(value: \"ascending\" | \"descending\") {\n\t\tthis.setAttribute(\"direction\", value);\n\t}\n\n\t// store attribute to trigger loading and saving to sort and filters localStorage\n\tget store(): boolean {\n\t\treturn this.hasAttribute(\"store\");\n\t}\n\n\t// URLparams attribute to trigger checking URL params on load\n\tget URLparams(): boolean {\n\t\treturn this.hasAttribute(\"urlparams\");\n\t}\n\n\tget id(): string {\n\t\treturn this.getAttribute(\"id\") || \"\";\n\t}\n\n\tget pagination(): number {\n\t\treturn Number(this.getAttribute(\"pagination\")) || 0;\n\t}\n\n\tset pagination(value: number) {\n\t\tthis.setAttribute(\"pagination\", value.toString());\n\t}\n\n\tget page(): number {\n\t\treturn Number(this.getAttribute(\"page\")) || 1;\n\t}\n\n\tset page(value: number) {\n\t\tthis.setAttribute(\"page\", value.toString());\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                             Connected Callback                             */\n\t/* -------------------------------------------------------------------------- */\n\t/* ------------- Fires every time the event is added to the DOM ------------- */\n\n\tpublic connectedCallback(): void {\n\t\t/* -------------- Init code which requires DOM to be ready -------------- */\n\n\t\tthis.init();\n\t}\n\n\tprivate async init() {\n\t\t// 1. Get table, tbody, rows, and column names in this.cols\n\t\tconsole.time(\"init\");\n\t\tthis.getTable();\n\n\t\t// 2. wait for any custom elements to to load; need this in case action-table-switch or similar elements are used\n\t\tconsole.timeLog(\"init\", \"2\");\n\t\t// TODO: rewrite this so it is better\n\t\t// Only fires if there are custom elements as await slows it down.\n\t\t// I will need to also add await for the pagination component later though as this breaks that test\n\t\tconst tbody = this.querySelector(\"tbody\");\n\t\tif (tbody) {\n\t\t\tconst customElementsArray = Array.from(tbody.querySelectorAll(\"*\")).filter((el) => el.tagName.indexOf(\"-\") !== -1);\n\t\t\tif (customElementsArray.length > 0) {\n\t\t\t\tawait this.waitForCustomElements(tbody);\n\t\t\t}\n\t\t}\n\n\t\t// 3. Get table content\n\t\tconsole.timeLog(\"init\", \"3\");\n\t\tthis.getTableContent();\n\n\t\t// 4. add mutation observer to tbody\n\t\tconsole.timeLog(\"init\", \"4\");\n\t\tthis.addObserver(this.tbody);\n\n\t\t// 5. Add no results tfoot message\n\t\tconsole.timeLog(\"init\", \"5\");\n\t\tthis.addNoResultsTfoot();\n\n\t\t// 6. Get local storage for sort and filters. Overrides attributes\n\t\tconsole.timeLog(\"init\", \"6\");\n\t\tthis.getLocalStorage();\n\t\t// console.log(\"3. init: getLocalStorage ~ this.filters\", this.filters);\n\n\t\t// 7. Get URL params. Overrides local storage and attributes\n\t\tconsole.timeLog(\"init\", \"7\");\n\t\tthis.getURLParams();\n\t\t// console.log(\"4. init: getURLParams ~ this.filters\", this.filters);\n\t\tconsole.timeLog(\"init\", \"8\");\n\t\tif (this.pagination > 0) {\n\t\t\tconst actionTablePagination = document.querySelector(\"action-table-pagination\") as ActionTablePagination;\n\t\t\tif (actionTablePagination) {\n\t\t\t\tawait customElements.whenDefined(\"action-table-pagination\");\n\t\t\t\tactionTablePagination.pagination = this.pagination;\n\t\t\t\tactionTablePagination.setProps({ page: this.page, rowsShown: this.rowsShown });\n\t\t\t}\n\t\t}\n\t\tconsole.timeLog(\"init\", \"9\");\n\t\t// 9. set ready so that attributeChangedCallback can run automatically when sort or direction is changed\n\t\tthis.ready = true;\n\t\tconsole.timeLog(\"init\", \"10\");\n\t\tthis.initialFilter();\n\t\tconsole.timeEnd(\"init\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                         Attribute Changed Callback                        */\n\t/* -------------------------------------------------------------------------- */\n\n\tpublic attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t\t// this ready is set to true after localStorage and URL Params are loaded.\n\t\tif (oldValue !== newValue && this.ready) {\n\t\t\tif (name === \"sort\" || name === \"direction\") {\n\t\t\t\tthis.sortTable();\n\t\t\t}\n\t\t\tif (name === \"page\") {\n\t\t\t\tthis.appendRows();\n\t\t\t}\n\t\t\t// TODO: create function to change pagination for table and pagination element\n\t\t\tif (name === \"pagination\") {\n\t\t\t\tconsole.log(\"pagination\", oldValue, newValue);\n\t\t\t\t// this.appendRows();\n\t\t\t}\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                               PRIVATE METHODS                              */\n\t/* -------------------------------------------------------------------------- */\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                   Private Method: Trigger Initial Filter                   */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate async initialFilter() {\n\t\t// 1. wait for any custom elements to to load\n\t\t/* this is needed in case there are action-table-switch or similar elements in the table that need to be filtered or sorted\n        /* it is also needed for setting the filter elements in the action-table-filters\n        */\n\t\tconsole.time(\"initialFilter\");\n\n\t\t// 2. Filter and sort the table now that the custom elements have loaded\n\t\tconsole.timeLog(\"initialFilter\", \"2\");\n\t\tif (Object.keys(this.filters).length > 0) {\n\t\t\tthis.filterTable();\n\t\t}\n\n\t\tconsole.timeLog(\"initialFilter\", \"3\");\n\t\tif (this.sort) this.sortTable();\n\n\t\tconsole.timeLog(\"initialFilter\", \"4\");\n\n\t\tif (Object.keys(this.filters).length === 0 && !this.sort) {\n\t\t\tthis.appendRows();\n\t\t}\n\n\t\t// 2. If no rows are shown then reset the filters\n\t\tconsole.timeLog(\"initialFilter\", \"5\");\n\t\tif (this.rowsShown === 0) {\n\t\t\tthis.resetFilters();\n\t\t}\n\n\t\tconsole.timeLog(\"initialFilter\", \"6\");\n\t\t// 4. if <action-table-filters> exists then trigger setFilterElements\n\n\t\tconst actionTableFilters = this.querySelector(\"action-table-filters\") as ActionTableFilters;\n\t\tif (actionTableFilters) {\n\t\t\tawait customElements.whenDefined(\"action-table-filters\");\n\t\t\tactionTableFilters.setFilterElements(this.filters);\n\t\t}\n\n\t\tconsole.timeEnd(\"initialFilter\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*        Private Method: Wait for inner custom elements to be defined        */\n\t/* -------------------------------------------------------------------------- */\n\n\t// TODO: wonder if there is a better way to speed this up\n\tprivate async waitForCustomElements(node: HTMLElement = this): Promise<Element[]> {\n\t\tconsole.log(\"waitForCustomElements\", node);\n\n\t\tconsole.time(\"waitForCustomElements\");\n\n\t\t// 1. Get any custom elements\n\t\tconst customElementsArray = Array.from(node.querySelectorAll(\"*\")).filter((el) => el.tagName.indexOf(\"-\") !== -1);\n\n\t\tconsole.timeLog(\"waitForCustomElements\", \"0\");\n\t\tif (customElementsArray.length === 0) {\n\t\t\tconsole.timeEnd(\"waitForCustomElements\");\n\t\t\treturn [];\n\t\t}\n\t\tconsole.log(\"customElementsArray\", customElementsArray);\n\n\t\t// 2. Return if empty or all custom elements are defined\n\t\tconst allDefined = customElementsArray.every((element) => element && customElements.get(element.tagName.toLowerCase()));\n\t\tif (allDefined) {\n\t\t\treturn customElementsArray;\n\t\t}\n\t\tconsole.timeLog(\"waitForCustomElements\", \"1\");\n\t\t// 3. Create custom elements when defined Array\n\t\tconst customElementsDefinedArray = customElementsArray.map((element) => customElements.whenDefined(element.tagName.toLowerCase()));\n\t\tconsole.timeLog(\"waitForCustomElements\", \"2\");\n\t\t// 4. Create Timeout Promise\n\t\tconst timeoutPromise = new Promise<Element[]>((_, reject) => setTimeout(() => reject(\"Timeout\"), 300));\n\t\ttry {\n\t\t\t// 5. Wait for custom elements or timeout\n\t\t\tawait Promise.race([Promise.all(customElementsDefinedArray), timeoutPromise]);\n\t\t\tconsole.timeEnd(\"waitForCustomElements\");\n\t\t\treturn customElementsArray;\n\t\t} catch (error) {\n\t\t\t// Handle timeout error here\n\t\t\t// eslint-disable-next-line  no-console\n\t\t\tconsole.error(\"Timeout occurred while waiting for custom elements\");\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                           Filter variable methods                          */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate setFilter(columnName: string, values: string[], exclusive = false): void {\n\t\t// 1. create temporary filter object\n\t\tconst filters = this.filters;\n\t\t// 2. Make sure filter actually exists as a column name and isn't search whole table special name \"action-table\"\n\t\tif (!this.doesColumnExist(columnName)) return;\n\t\t// 3. makes sure that the column name key exists; if not create it\n\t\tfilters[columnName] = filters[columnName] || {};\n\t\t// 4. add values to filter object\n\t\tfilters[columnName].values = values;\n\t\t// 5. Add exclusive if true\n\t\tif (exclusive) filters[columnName].exclusive = exclusive;\n\t\t// 6. Replace existing this.filters with new\n\t\tthis.filters = filters;\n\t\t// 7. Update local storage\n\t\tthis.setFiltersLocalStorage();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                Private Method: make sure columnName is legit               */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate doesColumnExist(columnName: string): boolean {\n\t\treturn this.cols.includes(columnName) || columnName === \"action-table\";\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*              Private Method: localStorage for sort and filters             */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getLocalStorage(): void {\n\t\tif (!this.store) return;\n\t\t// 1. Get sort and direction from local storage\n\t\tconst lsActionTable = localStorage.getItem(`action-table${this.id ? `-${this.id}` : \"\"}`);\n\t\tif (lsActionTable) {\n\t\t\tconst lsActionTableJSON = JSON.parse(lsActionTable) as { sort: string; direction: \"ascending\" | \"descending\" };\n\t\t\tthis.sort = lsActionTableJSON.sort;\n\t\t\tthis.direction = lsActionTableJSON.direction;\n\t\t}\n\n\t\t// 2. Get filters from localStorage\n\t\tconst lsActionTableFilters = localStorage.getItem(`action-table-filters${this.id ? `-${this.id}` : \"\"}`);\n\t\tif (lsActionTableFilters) {\n\t\t\tthis.filters = JSON.parse(lsActionTableFilters) as FiltersObject;\n\t\t}\n\t}\n\n\t/* ---------------------------- Set Local Storage --------------------------- */\n\n\tprivate setFiltersLocalStorage() {\n\t\tif (this.store) localStorage.setItem(`action-table-filters${this.id ? `-${this.id}` : \"\"}`, JSON.stringify(this.filters));\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*         Private Method: get URLSearchParams for sort and filters           */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getURLParams(): void {\n\t\tif (!this.URLparams) return;\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\tif (params.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\t// Get sort and direction from URL\n\t\tthis.sort = params.get(\"sort\") || this.sort;\n\t\tconst direction = params.get(\"direction\");\n\t\tif (direction === \"ascending\" || direction === \"descending\") {\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\t// sort through remaining params for filters to create a filters object\n\t\tconst filters: FiltersObject = {};\n\t\tfor (const [key, value] of params.entries()) {\n\t\t\t// Only add key if it's not sort or direction and exists as a column name\n\t\t\tif (key !== \"sort\" && key !== \"direction\" && this.doesColumnExist(key)) {\n\t\t\t\tfilters[key] = filters[key] || {};\n\t\t\t\tfilters[key].values = [value];\n\t\t\t}\n\t\t}\n\n\t\t// if filters object is not empty, set this.filters\n\t\tif (Object.keys(filters).length > 0) {\n\t\t\tthis.filters = filters;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                  Private Method: add event listeners                       */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate addEventListeners(): void {\n\t\t// Sort buttons\n\t\tthis.addEventListener(\n\t\t\t\"click\",\n\t\t\t(event) => {\n\t\t\t\tconst el = event.target as HTMLInputElement;\n\t\t\t\t// only fire if event target is a button with data-col\n\t\t\t\tif (el.tagName === \"BUTTON\" && el.dataset.col) {\n\t\t\t\t\tconst name = el.dataset.col;\n\t\t\t\t\tlet direction: \"ascending\" | \"descending\" = \"ascending\";\n\t\t\t\t\tif (this.sort === name && this.direction === \"ascending\") {\n\t\t\t\t\t\tdirection = \"descending\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.sort = name;\n\t\t\t\t\tthis.direction = direction;\n\t\t\t\t\tif (this.store) localStorage.setItem(`action-table${this.id ? `-${this.id}` : \"\"}`, JSON.stringify({ sort: this.sort, direction: direction }));\n\t\t\t\t}\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\n\t\t// Listens for checkboxes in the table since mutation observer does not support checkbox changes\n\t\tthis.addEventListener(\"change\", (event) => {\n\t\t\tconst el = event.target as HTMLInputElement;\n\t\t\t// only fire if event target is a checkbox in a td; this stops it firing for filters\n\t\t\tif (el.closest(\"td\") && el.type === \"checkbox\") {\n\t\t\t\t// get new content, sort and filter. This works for checkboxes and action-table-switch\n\t\t\t\tconsole.log(\"event change\", el);\n\t\t\t\tthis.getContentSortAndFilter();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getContentSortAndFilter(): void {\n\t\tthis.getTableContent();\n\t\tthis.filterTable();\n\t\tthis.sortTable();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*           Private Method: get table, tbody, rows, and column names         */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getTable(): void {\n\t\tconsole.time(\"getTable\");\n\t\tconst table = this.querySelector(\"table\") as HTMLTableElement;\n\t\tthis.thead = table.querySelector(\"thead\") as HTMLTableSectionElement;\n\t\tthis.tbody = table.querySelector(\"tbody\") as HTMLTableSectionElement;\n\t\tconst rows = this.tbody.querySelectorAll(\"tbody tr\") as NodeListOf<HTMLTableRowElement>;\n\t\tconsole.timeLog(\"getTable\", \"2\");\n\t\tthis.rowsArray = Array.from(rows) as Array<ActionRow>;\n\t\tthis.rowsShown = this.rowsArray.length;\n\t\tconsole.timeLog(\"getTable\", \"3\");\n\t\tthis.getColumns(table);\n\t\tconsole.timeEnd(\"getTable\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                 Private Method: get columns from table                      */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getColumns(table: HTMLTableElement): ColsArray {\n\t\tconsole.time(\"getColumns\");\n\t\t// 1. Get column headers\n\t\tthis.ths = table.querySelectorAll(\"th\");\n\t\tconst theadRow = table.querySelector(\"thead tr\");\n\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\tif (this.ths) {\n\t\t\tthis.ths.forEach((th) => {\n\t\t\t\t// 2. Column name is based on data-col attribute or results of getCellContent() function\n\t\t\t\tlet name = th.dataset.col || this.getCellContent(th);\n\t\t\t\t// 3. Remove whitespace and convert to lowercase\n\t\t\t\tname = name.trim().toLowerCase();\n\t\t\t\tif (name) {\n\t\t\t\t\t// 4. Add column name to cols array\n\t\t\t\t\tthis.cols.push(name);\n\t\t\t\t\t// 5. Set data-col attribute for easy access later\n\t\t\t\t\tth.dataset.col = name;\n\t\t\t\t\t// 6. if the column is sortable then wrap it in a button, and add aria\n\t\t\t\t\tif (!th.hasAttribute(\"no-sort\")) {\n\t\t\t\t\t\tconst thClone = th.cloneNode();\n\t\t\t\t\t\tconst button = document.createElement(\"button\");\n\t\t\t\t\t\tbutton.dataset.col = name;\n\t\t\t\t\t\tbutton.innerHTML = th.innerHTML;\n\t\t\t\t\t\tthClone.appendChild(button);\n\t\t\t\t\t\tfragment.appendChild(thClone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfragment.appendChild(th);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\ttheadRow?.replaceChildren(fragment);\n\n\t\tconsole.timeLog(\"getColumns\", \"2\");\n\n\t\t// 7. add colGroup unless it already exists\n\t\tconst colGroup = table.querySelector(\"colgroup\");\n\t\tif (!colGroup) {\n\t\t\t// 7.1 create colgroup\n\t\t\tconst colGroup = document.createElement(\"colgroup\");\n\t\t\t// 7.2 add col for each column\n\t\t\tthis.cols.forEach(() => {\n\t\t\t\tconst col = document.createElement(\"col\");\n\t\t\t\tcolGroup.appendChild(col);\n\t\t\t});\n\t\t\t// 7.3 prepend colgroup\n\t\t\ttable.prepend(colGroup);\n\t\t}\n\t\tconsole.timeLog(\"getColumns\", \"3\");\n\n\t\tthis.colGroupCols = this.querySelectorAll(\"col\");\n\t\t// console.log(\"action-table cols\", this.cols);\n\t\t// 8. Return cols array\n\t\tconsole.timeEnd(\"getColumns\");\n\t\treturn this.cols;\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*               Private Method: add a No Results tfoot message               */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate addNoResultsTfoot() {\n\t\tconst tfoot = document.createElement(\"tfoot\");\n\t\ttfoot.classList.add(\"no-results\");\n\t\ttfoot.innerHTML = `<tr><td colspan=\"${this.cols.length}\"><p>No Results</p> <p><button>Reset Filters</button></p></td></tr>`;\n\t\ttfoot.addEventListener(\"click\", (e) => {\n\t\t\tconst button = e.target as HTMLButtonElement;\n\t\t\tif (button.tagName !== \"BUTTON\") return;\n\t\t\t// 1. Reset the filters and filterTable element\n\t\t\tthis.resetFilters();\n\t\t\t// 2. if <action-table-filter> exists then trigger resetAllFilterElements\n\t\t\tconst actionTableFilters = this.querySelector(\"action-table-filters\") as ActionTableFilters;\n\t\t\tif (actionTableFilters) {\n\t\t\t\tactionTableFilters.resetAllFilterElements();\n\t\t\t}\n\t\t});\n\t\ttfoot.style.display = \"none\";\n\t\tthis.tfoot = tfoot;\n\t\tthis.tbody.after(this.tfoot);\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Private Method: get cell content                        */\n\t/* -------------------------------------------------------------------------- */\n\tprivate getCellContent(cell: HTMLTableCellElement): string {\n\t\t// 1. get cell content with innerText\n\t\tlet cellContent: string = cell?.innerText || \"\";\n\t\t// 2. trim to make sure it's not just spaces\n\t\tcellContent = cellContent?.trim();\n\n\t\t// 3. if there is no cell content then check...\n\t\tif (!cellContent) {\n\t\t\t// 3.1 if there is an svg then get title; otherwise return empty string\n\t\t\tconst svg = cell.querySelector(\"svg\") as SVGElement;\n\t\t\tif (svg) {\n\t\t\t\tcellContent = svg.querySelector(\"title\")?.textContent || \"\";\n\t\t\t}\n\t\t\t// 3.2 if checkbox element then get value if checked\n\t\t\tconst checkbox = cell.querySelector(\"[type=checkbox]\") as HTMLInputElement;\n\t\t\tif (checkbox?.checked) {\n\t\t\t\tcellContent = checkbox.value;\n\t\t\t}\n\t\t}\n\t\treturn cellContent.trim();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Private Method Get Table Data                       */\n\t/* -------------------------------------------------------------------------- */\n\t/* ------- Get all table content as data for quicker sorting/filtering ------ */\n\n\tprivate getTableContent() {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.time(\"getTableContent\");\n\t\tthis.rowsArray.forEach((row) => {\n\t\t\t// const rowObj: RowData = { node: row, columns: {} };\n\t\t\t// 1. grab all cells in the row\n\t\t\tconst cells = row.querySelectorAll(\"td\");\n\t\t\tthis.cols.forEach((col, i) => {\n\t\t\t\t// 1. cell matching column name\n\t\t\t\tconst cell = cells[i] as ActionCell;\n\n\t\t\t\tconst cellContent = this.getCellContent(cell);\n\t\t\t\tcell.actionTable = {\n\t\t\t\t\tcol,\n\t\t\t\t\tsort: cell.dataset.sort || cellContent,\n\t\t\t\t\tfilter: cell.dataset.filter || cellContent,\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.timeEnd(\"getTableContent\");\n\t}\n\n\tprivate addObserver(tbody: HTMLTableSectionElement) {\n\t\t// Goode reference for MutationObserver: https://davidwalsh.name/mutationobserver-api\n\t\t// 1. Create an observer instance\n\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\t// 1.1 sort through all mutations\n\t\t\tmutations.forEach((mutation) => {\n\t\t\t\tconst target = mutation.target as Element;\n\t\t\t\tif (target instanceof HTMLTableCellElement || target instanceof HTMLSpanElement || target instanceof HTMLLIElement) {\n\t\t\t\t\t// 1.2 if mutation.target is a cell, span, or then run getTableContent, filterTable, and sortTable\n\t\t\t\t\tconsole.log(\"MutationObserver\", target, mutation.type);\n\t\t\t\t\tthis.getContentSortAndFilter();\n\t\t\t\t}\n\t\t\t});\n\t\t\t// }\n\t\t});\n\t\tobserver.observe(tbody, { childList: true, subtree: true, attributes: true });\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                               PUBLIC METHODS                               */\n\t/* -------------------------------------------------------------------------- */\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Public Method: reset filters                        */\n\t/* -------------------------------------------------------------------------- */\n\t/* ---------- Used by reset button in action-table-filters element ---------- */\n\n\tpublic resetFilters(): void {\n\t\t// remove all filters from this.col then call filterTable\n\t\tthis.filters = {};\n\t\tthis.setFiltersLocalStorage();\n\t\tthis.filterTable();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*            Public Method: filter table on column name and value            */\n\t/* -------------------------------------------------------------------------- */\n\t/* ------------- Used by filters in action-table-filter element ------------- */\n\t/* ------------- Also triggered by local storage and URL params ------------- */\n\n\tpublic filterTable(columnName: string = \"\", values: string[] = [], exclusive = false, regexOpt = \"i\"): void {\n\t\tconsole.log(\"filterTable\");\n\n\t\t// eslint-disable-next-line no-console\n\t\t// console.time(\"filterTable\");\n\t\tcolumnName = columnName.trim().toLowerCase();\n\t\t// this.filterTable(columnName, values, exclusive, regexOpt);\n\n\t\t// 1. If columnName exists as a column then store filter value locally and in localStorage; otherwise filter table based on existed filter\n\t\tif (this.doesColumnExist(columnName)) {\n\t\t\tthis.setFilter(columnName, values, exclusive);\n\t\t}\n\n\t\t// 2. get filter value for whole row based on special reserved name \"action-table\"\n\t\tconst filterForWholeRow = this.filters[\"action-table\"];\n\n\t\tthis.rowsArray.forEach((row) => {\n\t\t\t// 3.1 set base display value as \"\"\n\t\t\tlet hide = false;\n\t\t\t// 3.2 get td cells\n\t\t\tconst cells = row.querySelectorAll(\"td\") as NodeListOf<ActionCell>;\n\t\t\t// 3.3 if filter value for whole row exists then run filter against innerText of entire row content\n\t\t\tif (filterForWholeRow) {\n\t\t\t\t// 3.3.1 build string of all td data-filter values\n\t\t\t\tconst content = Array.from(cells)\n\t\t\t\t\t.map((cell) => cell.actionTable.filter)\n\t\t\t\t\t.join(\" \");\n\n\t\t\t\tif (this.shouldHide(filterForWholeRow, content, regexOpt)) {\n\t\t\t\t\thide = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 3.4 if columnName is not action-table then run filter against td cell content\n\t\t\tcells.forEach((cell, i) => {\n\t\t\t\tconst content = cell.actionTable.filter;\n\t\t\t\tconst filter = this.filters[this.cols[i]];\n\t\t\t\tif (!filter) return;\n\n\t\t\t\tif (this.shouldHide(filter, content, regexOpt)) {\n\t\t\t\t\thide = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// 3.5 set display\n\t\t\trow.hideRow = hide;\n\t\t});\n\n\t\tthis.appendRows(this.rowsArray);\n\n\t\t// console.timeEnd(\"filterTable\");\n\t}\n\n\tprivate shouldHide(filter: SingleFilterObject, content: string, regexOpt: string): boolean {\n\t\t// console.log(\"shouldHide\", filter, content);\n\t\tif (filter.values && filter.values.length > 0) {\n\t\t\t// 1. build regex from filterValues array (checkboxes and select menus send arrays)\n\t\t\tlet regexPattern = filter.values.join(\"|\");\n\t\t\tif (filter.exclusive) {\n\t\t\t\tconst regexParts = filter.values.map((str) => `(?=.*${str})`);\n\t\t\t\tregexPattern = `${regexParts.join(\"\")}.*`;\n\t\t\t}\n\t\t\tconst regex = new RegExp(regexPattern, regexOpt);\n\n\t\t\t// 2. check if content matches\n\t\t\tif (!regex.test(content)) {\n\t\t\t\t// console.log(\"hide\", columnName, content);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// console.log(\"show\", columnName, content);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*        Public Method: sort table based on column name and direction        */\n\t/* -------------------------------------------------------------------------- */\n\t/* ----------- Used by sort header buttons and attributes callback ----------- */\n\t/* ------------- Also triggered by local storage and URL params ------------- */\n\n\tpublic sortTable(columnName = this.sort, direction = this.direction) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.time(\"sortTable\");\n\t\tcolumnName = columnName.toLowerCase();\n\t\t// 1. Get column index from column name\n\t\tconst columnIndex = this.cols.findIndex((col) => col === columnName);\n\t\t// 2. If column exists and there are rows then sort\n\t\tif (columnIndex >= 0 && this.rowsArray.length > 0) {\n\t\t\tconsole.log(`sort by ${columnName} ${direction}`);\n\n\t\t\tconsole.timeLog(\"sortTable\");\n\t\t\t// 1. Sort rows\n\t\t\tconst sortedRows = this.customSort(this.rowsArray, columnIndex);\n\n\t\t\tthis.colGroupCols.forEach((colGroupCol, i) => {\n\t\t\t\tif (i === columnIndex) {\n\t\t\t\t\tcolGroupCol.classList.add(\"sorted\");\n\t\t\t\t} else {\n\t\t\t\t\tcolGroupCol.classList.remove(\"sorted\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// set aria sorting direction\n\t\t\tthis.ths.forEach((th, i) => {\n\t\t\t\tconst ariaSort = i === columnIndex ? direction : \"none\";\n\t\t\t\tth.setAttribute(\"aria-sort\", ariaSort);\n\t\t\t});\n\n\t\t\tthis.appendRows(sortedRows);\n\t\t}\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.timeEnd(\"sortTable\");\n\t}\n\n\t/* --------------------------- Private Sort Method -------------------------- */\n\n\tprivate customSort(rows: ActionRow[], columnIndex: number): ActionRow[] {\n\t\treturn rows.sort((r1, r2) => {\n\t\t\t// 1. If descending sort, swap rows\n\t\t\tif (this.direction === \"descending\") {\n\t\t\t\tconst temp = r1;\n\t\t\t\tr1 = r2;\n\t\t\t\tr2 = temp;\n\t\t\t}\n\n\t\t\t// 2. Get content\n\t\t\tconst c1 = r1.children[columnIndex] as ActionCell;\n\t\t\tconst c2 = r2.children[columnIndex] as ActionCell;\n\t\t\tconst a: string = c1.actionTable.sort;\n\t\t\tconst b: string = c2.actionTable.sort;\n\n\t\t\tfunction isNumber(n: string) {\n\t\t\t\treturn !isNaN(Number(n));\n\t\t\t}\n\n\t\t\tif (isNumber(a) && isNumber(b)) {\n\t\t\t\tconst aNum = Number(a);\n\t\t\t\tconst bNum = Number(b);\n\t\t\t\tif (aNum < bNum) return -1;\n\t\t\t\tif (aNum > bNum) return 1;\n\t\t\t}\n\t\t\tif (typeof a === \"string\" && typeof b === \"string\") {\n\t\t\t\treturn a.localeCompare(b);\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\tprivate isActivePage(i: number): boolean {\n\t\t// returns if pagination is enabled (> 0) and row is on current page.\n\t\t// For instance if the current page is 2 and pagination is 10 then is greater than 10 and less than or equal to 20\n\t\tconst pagination = this.pagination;\n\t\tif (pagination === 0) return true;\n\t\tconst startIndex = pagination * (this.page - 1) + 1;\n\t\tconst endIndex = pagination * this.page;\n\t\treturn i + 1 > startIndex && i <= endIndex;\n\t}\n\n\tprivate appendRows(rows: ActionRow[] = this.rowsArray): void {\n\t\tconsole.log(\"appendRows log\");\n\t\tconsole.time(\"appendRows\");\n\n\t\t// fragment for holding rows\n\t\tconst fragment = document.createDocumentFragment();\n\t\t// temporary variable\n\t\tlet rowsShown = 0;\n\n\t\t// loop through rows to set hide or show\n\t\trows.forEach((row) => {\n\t\t\tif (!row.hideRow) rowsShown++;\n\n\t\t\tif (row.hideRow || !this.isActivePage(rowsShown)) {\n\t\t\t\trow.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\trow.style.display = \"\";\n\t\t\t\tfragment.appendChild(row);\n\t\t\t}\n\t\t});\n\n\t\tthis.tfoot.style.display = rowsShown === 0 ? \"table-footer-group\" : \"none\";\n\n\t\tthis.tbody.prepend(fragment);\n\n\t\t// Pagination only stuff\n\t\tif (this.pagination > 0) {\n\t\t\tconsole.log(\"pagination\");\n\n\t\t\t// temporary variable\n\t\t\tlet currentPage = this.page;\n\t\t\tconst numberOfPages = Math.ceil(rowsShown / this.pagination);\n\n\t\t\t// if current page is greater than the number of pages then set it to the last page; if number of pages is 0 (if no rows) then set to the first page.\n\t\t\tif (currentPage > numberOfPages) {\n\t\t\t\tcurrentPage = numberOfPages || 1;\n\t\t\t}\n\n\t\t\t// if the action-table-pagination element exists then any changes to pagination or page will setProps\n\t\t\tconst actionTablePagination = document.querySelector(\"action-table-pagination\") as ActionTablePagination;\n\n\t\t\tif (actionTablePagination) {\n\t\t\t\tconst props: PaginationProps = {};\n\t\t\t\tif (this.page !== currentPage) {\n\t\t\t\t\tprops.page = currentPage;\n\t\t\t\t}\n\t\t\t\tif (this.rowsShown !== rowsShown) {\n\t\t\t\t\tprops.rowsShown = rowsShown;\n\t\t\t\t}\n\t\t\t\tif (Object.keys(props).length > 0) {\n\t\t\t\t\tactionTablePagination.setProps(props);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.page = currentPage;\n\t\t}\n\n\t\tthis.rowsShown = rowsShown;\n\n\t\tconsole.timeEnd(\"appendRows\");\n\t}\n}\n\ncustomElements.define(\"action-table\", ActionTable);\n"],"names":["ActionTable","__publicField","_a","value","direction","tbody","el","actionTablePagination","name","oldValue","newValue","actionTableFilters","node","customElementsArray","element","customElementsDefinedArray","timeoutPromise","_","reject","columnName","values","exclusive","filters","lsActionTable","lsActionTableJSON","lsActionTableFilters","params","key","event","table","rows","theadRow","fragment","th","thClone","button","colGroup","col","tfoot","cell","cellContent","svg","checkbox","row","cells","i","mutations","mutation","target","regexOpt","filterForWholeRow","hide","content","filter","regexPattern","str","columnIndex","sortedRows","colGroupCol","ariaSort","r1","r2","temp","c1","c2","a","b","isNumber","n","aNum","bNum","pagination","startIndex","endIndex","rowsShown","currentPage","numberOfPages","props"],"mappings":"wKAGO,MAAMA,UAAoB,WAAY,CAC5C,aAAc,CACP,QAeAC,EAAA,cACAA,EAAA,cACCA,EAAA,cACAA,EAAA,YACDA,EAAA,YAAkB,CAAA,GAClBA,EAAA,eAAyB,CAAA,GACzBA,EAAA,kBACCA,EAAA,aAAQ,IACRA,EAAA,qBACDA,EAAA,iBAAY,GAflB,KAAK,UAAY,YAGjB,KAAK,kBAAkB,CACxB,CAiBA,WAAW,oBAA+B,CACzC,MAAO,CAAC,OAAQ,YAAa,OAAQ,YAAY,CAClD,CAIA,IAAI,MAAe,CAtCb,IAAAC,EAuCL,QAAOA,EAAA,KAAK,aAAa,MAAM,IAAxB,YAAAA,EAA2B,OAAO,gBAAiB,EAC3D,CACA,IAAI,KAAKC,EAAe,CAClB,KAAA,aAAa,OAAQA,CAAK,CAChC,CAGA,IAAI,WAAwC,CA9CtC,IAAAD,EA+CL,MAAME,GAAYF,EAAA,KAAK,aAAa,WAAW,IAA7B,YAAAA,EAAgC,OAAO,cACrD,OAAAE,IAAc,aAAeA,IAAc,aACvCA,EAED,WACR,CACA,IAAI,UAAUD,EAAmC,CAC3C,KAAA,aAAa,YAAaA,CAAK,CACrC,CAGA,IAAI,OAAiB,CACb,OAAA,KAAK,aAAa,OAAO,CACjC,CAGA,IAAI,WAAqB,CACjB,OAAA,KAAK,aAAa,WAAW,CACrC,CAEA,IAAI,IAAa,CACT,OAAA,KAAK,aAAa,IAAI,GAAK,EACnC,CAEA,IAAI,YAAqB,CACxB,OAAO,OAAO,KAAK,aAAa,YAAY,CAAC,GAAK,CACnD,CAEA,IAAI,WAAWA,EAAe,CAC7B,KAAK,aAAa,aAAcA,EAAM,SAAU,CAAA,CACjD,CAEA,IAAI,MAAe,CAClB,OAAO,OAAO,KAAK,aAAa,MAAM,CAAC,GAAK,CAC7C,CAEA,IAAI,KAAKA,EAAe,CACvB,KAAK,aAAa,OAAQA,EAAM,SAAU,CAAA,CAC3C,CAOO,mBAA0B,CAGhC,KAAK,KAAK,CACX,CAEA,MAAc,MAAO,CAGpB,KAAK,SAAS,EAOR,MAAAE,EAAQ,KAAK,cAAc,OAAO,EA8BpC,GA7BAA,GACyB,MAAM,KAAKA,EAAM,iBAAiB,GAAG,CAAC,EAAE,OAAQC,GAAOA,EAAG,QAAQ,QAAQ,GAAG,IAAM,EAAE,EACzF,OAAS,GAC1B,MAAA,KAAK,sBAAsBD,CAAK,EAMxC,KAAK,gBAAgB,EAIhB,KAAA,YAAY,KAAK,KAAK,EAI3B,KAAK,kBAAkB,EAIvB,KAAK,gBAAgB,EAKrB,KAAK,aAAa,EAGd,KAAK,WAAa,EAAG,CAClB,MAAAE,EAAwB,SAAS,cAAc,yBAAyB,EAC1EA,IACG,MAAA,eAAe,YAAY,yBAAyB,EAC1DA,EAAsB,WAAa,KAAK,WAClBA,EAAA,SAAS,CAAE,KAAM,KAAK,KAAM,UAAW,KAAK,UAAW,EAE/E,CAGA,KAAK,MAAQ,GAEb,KAAK,cAAc,CAEpB,CAMO,yBAAyBC,EAAcC,EAAkBC,EAAkB,CAE7ED,IAAaC,GAAY,KAAK,SAC7BF,IAAS,QAAUA,IAAS,cAC/B,KAAK,UAAU,EAEZA,IAAS,QACZ,KAAK,WAAW,EAQnB,CAUA,MAAc,eAAgB,CASzB,OAAO,KAAK,KAAK,OAAO,EAAE,OAAS,GACtC,KAAK,YAAY,EAId,KAAK,MAAM,KAAK,UAAU,EAI1B,OAAO,KAAK,KAAK,OAAO,EAAE,SAAW,GAAK,CAAC,KAAK,MACnD,KAAK,WAAW,EAKb,KAAK,YAAc,GACtB,KAAK,aAAa,EAMb,MAAAG,EAAqB,KAAK,cAAc,sBAAsB,EAChEA,IACG,MAAA,eAAe,YAAY,sBAAsB,EACpCA,EAAA,kBAAkB,KAAK,OAAO,EAInD,CAOA,MAAc,sBAAsBC,EAAoB,KAA0B,CAMjF,MAAMC,EAAsB,MAAM,KAAKD,EAAK,iBAAiB,GAAG,CAAC,EAAE,OAAQN,GAAOA,EAAG,QAAQ,QAAQ,GAAG,IAAM,EAAE,EAG5G,GAAAO,EAAoB,SAAW,EAElC,MAAO,GAMR,GADmBA,EAAoB,MAAOC,GAAYA,GAAW,eAAe,IAAIA,EAAQ,QAAQ,YAAY,CAAC,CAAC,EAE9G,OAAAD,EAIF,MAAAE,EAA6BF,EAAoB,IAAKC,GAAY,eAAe,YAAYA,EAAQ,QAAQ,YAAY,CAAC,CAAC,EAG3HE,EAAiB,IAAI,QAAmB,CAACC,EAAGC,IAAW,WAAW,IAAMA,EAAO,SAAS,EAAG,GAAG,CAAC,EACjG,GAAA,CAEG,aAAA,QAAQ,KAAK,CAAC,QAAQ,IAAIH,CAA0B,EAAGC,CAAc,CAAC,EAErEH,OACQ,CAIf,MAAO,EACR,CACD,CAMQ,UAAUM,EAAoBC,EAAkBC,EAAY,GAAa,CAEhF,MAAMC,EAAU,KAAK,QAEhB,KAAK,gBAAgBH,CAAU,IAEpCG,EAAQH,CAAU,EAAIG,EAAQH,CAAU,GAAK,CAAA,EAErCG,EAAAH,CAAU,EAAE,OAASC,EAEzBC,IAAmBC,EAAAH,CAAU,EAAE,UAAYE,GAE/C,KAAK,QAAUC,EAEf,KAAK,uBAAuB,EAC7B,CAMQ,gBAAgBH,EAA6B,CACpD,OAAO,KAAK,KAAK,SAASA,CAAU,GAAKA,IAAe,cACzD,CAMQ,iBAAwB,CAC/B,GAAI,CAAC,KAAK,MAAO,OAEX,MAAAI,EAAgB,aAAa,QAAQ,eAAe,KAAK,GAAK,IAAI,KAAK,EAAE,GAAK,EAAE,EAAE,EACxF,GAAIA,EAAe,CACZ,MAAAC,EAAoB,KAAK,MAAMD,CAAa,EAClD,KAAK,KAAOC,EAAkB,KAC9B,KAAK,UAAYA,EAAkB,SACpC,CAGM,MAAAC,EAAuB,aAAa,QAAQ,uBAAuB,KAAK,GAAK,IAAI,KAAK,EAAE,GAAK,EAAE,EAAE,EACnGA,IACE,KAAA,QAAU,KAAK,MAAMA,CAAoB,EAEhD,CAIQ,wBAAyB,CAC5B,KAAK,OAAO,aAAa,QAAQ,uBAAuB,KAAK,GAAK,IAAI,KAAK,EAAE,GAAK,EAAE,GAAI,KAAK,UAAU,KAAK,OAAO,CAAC,CACzH,CAMQ,cAAqB,CAC5B,GAAI,CAAC,KAAK,UAAW,OACrB,MAAMC,EAAS,IAAI,gBAAgB,OAAO,SAAS,MAAM,EACrD,GAAAA,EAAO,OAAS,EACnB,OAGD,KAAK,KAAOA,EAAO,IAAI,MAAM,GAAK,KAAK,KACjC,MAAAtB,EAAYsB,EAAO,IAAI,WAAW,GACpCtB,IAAc,aAAeA,IAAc,gBAC9C,KAAK,UAAYA,GAIlB,MAAMkB,EAAyB,CAAA,EAC/B,SAAW,CAACK,EAAKxB,CAAK,IAAKuB,EAAO,UAE7BC,IAAQ,QAAUA,IAAQ,aAAe,KAAK,gBAAgBA,CAAG,IACpEL,EAAQK,CAAG,EAAIL,EAAQK,CAAG,GAAK,CAAA,EAC/BL,EAAQK,CAAG,EAAE,OAAS,CAACxB,CAAK,GAK1B,OAAO,KAAKmB,CAAO,EAAE,OAAS,IACjC,KAAK,QAAUA,EAEjB,CAMQ,mBAA0B,CAE5B,KAAA,iBACJ,QACCM,GAAU,CACV,MAAMtB,EAAKsB,EAAM,OAEjB,GAAItB,EAAG,UAAY,UAAYA,EAAG,QAAQ,IAAK,CACxC,MAAAE,EAAOF,EAAG,QAAQ,IACxB,IAAIF,EAAwC,YACxC,KAAK,OAASI,GAAQ,KAAK,YAAc,cAChCJ,EAAA,cAGb,KAAK,KAAOI,EACZ,KAAK,UAAYJ,EACb,KAAK,OAAO,aAAa,QAAQ,eAAe,KAAK,GAAK,IAAI,KAAK,EAAE,GAAK,EAAE,GAAI,KAAK,UAAU,CAAE,KAAM,KAAK,KAAM,UAAAA,CAAsB,CAAA,CAAC,CAC9I,CACD,EACA,EAAA,EAII,KAAA,iBAAiB,SAAWwB,GAAU,CAC1C,MAAMtB,EAAKsB,EAAM,OAEbtB,EAAG,QAAQ,IAAI,GAAKA,EAAG,OAAS,YAGnC,KAAK,wBAAwB,CAC9B,CACA,CACF,CAEQ,yBAAgC,CACvC,KAAK,gBAAgB,EACrB,KAAK,YAAY,EACjB,KAAK,UAAU,CAChB,CAMQ,UAAiB,CAElB,MAAAuB,EAAQ,KAAK,cAAc,OAAO,EACnC,KAAA,MAAQA,EAAM,cAAc,OAAO,EACnC,KAAA,MAAQA,EAAM,cAAc,OAAO,EACxC,MAAMC,EAAO,KAAK,MAAM,iBAAiB,UAAU,EAE9C,KAAA,UAAY,MAAM,KAAKA,CAAI,EAC3B,KAAA,UAAY,KAAK,UAAU,OAEhC,KAAK,WAAWD,CAAK,CAEtB,CAMQ,WAAWA,EAAoC,CAGjD,KAAA,IAAMA,EAAM,iBAAiB,IAAI,EAChC,MAAAE,EAAWF,EAAM,cAAc,UAAU,EAEzCG,EAAW,SAAS,yBAkC1B,GAhCI,KAAK,KACH,KAAA,IAAI,QAASC,GAAO,CAExB,IAAIzB,EAAOyB,EAAG,QAAQ,KAAO,KAAK,eAAeA,CAAE,EAGnD,GADOzB,EAAAA,EAAK,KAAK,EAAE,YAAY,EAC3BA,EAMH,GAJK,KAAA,KAAK,KAAKA,CAAI,EAEnByB,EAAG,QAAQ,IAAMzB,EAEZyB,EAAG,aAAa,SAAS,EAQ7BD,EAAS,YAAYC,CAAE,MARS,CAC1B,MAAAC,EAAUD,EAAG,YACbE,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,QAAQ,IAAM3B,EACrB2B,EAAO,UAAYF,EAAG,UACtBC,EAAQ,YAAYC,CAAM,EAC1BH,EAAS,YAAYE,CAAO,CAAA,CAI9B,CACA,EAGFH,GAAA,MAAAA,EAAU,gBAAgBC,GAMtB,CADaH,EAAM,cAAc,UAAU,EAChC,CAERO,MAAAA,EAAW,SAAS,cAAc,UAAU,EAE7C,KAAA,KAAK,QAAQ,IAAM,CACjB,MAAAC,EAAM,SAAS,cAAc,KAAK,EACxCD,EAAS,YAAYC,CAAG,CAAA,CACxB,EAEDR,EAAM,QAAQO,CAAQ,CACvB,CAGK,YAAA,aAAe,KAAK,iBAAiB,KAAK,EAIxC,KAAK,IACb,CAMQ,mBAAoB,CACrB,MAAAE,EAAQ,SAAS,cAAc,OAAO,EACtCA,EAAA,UAAU,IAAI,YAAY,EAChCA,EAAM,UAAY,oBAAoB,KAAK,KAAK,MAAM,sEAChDA,EAAA,iBAAiB,QAAU,GAAM,CAEtC,GADe,EAAE,OACN,UAAY,SAAU,OAEjC,KAAK,aAAa,EAEZ,MAAA3B,EAAqB,KAAK,cAAc,sBAAsB,EAChEA,GACHA,EAAmB,uBAAuB,CAC3C,CACA,EACD2B,EAAM,MAAM,QAAU,OACtB,KAAK,MAAQA,EACR,KAAA,MAAM,MAAM,KAAK,KAAK,CAC5B,CAKQ,eAAeC,EAAoC,CA7frD,IAAArC,EA+fD,IAAAsC,GAAsBD,GAAA,YAAAA,EAAM,YAAa,GAK7C,GAHAC,EAAcA,GAAA,YAAAA,EAAa,OAGvB,CAACA,EAAa,CAEX,MAAAC,EAAMF,EAAK,cAAc,KAAK,EAChCE,IACHD,IAActC,EAAAuC,EAAI,cAAc,OAAO,IAAzB,YAAAvC,EAA4B,cAAe,IAGpD,MAAAwC,EAAWH,EAAK,cAAc,iBAAiB,EACjDG,GAAA,MAAAA,EAAU,UACbF,EAAcE,EAAS,MAEzB,CACA,OAAOF,EAAY,MACpB,CAOQ,iBAAkB,CAGpB,KAAA,UAAU,QAASG,GAAQ,CAGzB,MAAAC,EAAQD,EAAI,iBAAiB,IAAI,EACvC,KAAK,KAAK,QAAQ,CAACN,EAAKQ,IAAM,CAEvB,MAAAN,EAAOK,EAAMC,CAAC,EAEdL,EAAc,KAAK,eAAeD,CAAI,EAC5CA,EAAK,YAAc,CAClB,IAAAF,EACA,KAAME,EAAK,QAAQ,MAAQC,EAC3B,OAAQD,EAAK,QAAQ,QAAUC,CAAA,CAChC,CACA,CAAA,CACD,CAGF,CAEQ,YAAYnC,EAAgC,CAGlC,IAAI,iBAAkByC,GAAc,CAE1CA,EAAA,QAASC,GAAa,CAC/B,MAAMC,EAASD,EAAS,QACpBC,aAAkB,sBAAwBA,aAAkB,iBAAmBA,aAAkB,gBAGpG,KAAK,wBAAwB,CAC9B,CACA,CAAA,CAED,EACQ,QAAQ3C,EAAO,CAAE,UAAW,GAAM,QAAS,GAAM,WAAY,EAAA,CAAM,CAC7E,CAWO,cAAqB,CAE3B,KAAK,QAAU,GACf,KAAK,uBAAuB,EAC5B,KAAK,YAAY,CAClB,CAQO,YAAYc,EAAqB,GAAIC,EAAmB,CAAI,EAAAC,EAAY,GAAO4B,EAAW,IAAW,CAK9F9B,EAAAA,EAAW,KAAK,EAAE,YAAY,EAIvC,KAAK,gBAAgBA,CAAU,GAC7B,KAAA,UAAUA,EAAYC,EAAQC,CAAS,EAIvC,MAAA6B,EAAoB,KAAK,QAAQ,cAAc,EAEhD,KAAA,UAAU,QAASP,GAAQ,CAE/B,IAAIQ,EAAO,GAEL,MAAAP,EAAQD,EAAI,iBAAiB,IAAI,EAEvC,GAAIO,EAAmB,CAEtB,MAAME,EAAU,MAAM,KAAKR,CAAK,EAC9B,IAAKL,GAASA,EAAK,YAAY,MAAM,EACrC,KAAK,GAAG,EAEN,KAAK,WAAWW,EAAmBE,EAASH,CAAQ,IAChDE,EAAA,GAET,CAEMP,EAAA,QAAQ,CAACL,EAAMM,IAAM,CACpB,MAAAO,EAAUb,EAAK,YAAY,OAC3Bc,EAAS,KAAK,QAAQ,KAAK,KAAKR,CAAC,CAAC,EACnCQ,GAED,KAAK,WAAWA,EAAQD,EAASH,CAAQ,IACrCE,EAAA,GACR,CACA,EAGDR,EAAI,QAAUQ,CAAA,CACd,EAEI,KAAA,WAAW,KAAK,SAAS,CAG/B,CAEQ,WAAWE,EAA4BD,EAAiBH,EAA2B,CAE1F,GAAII,EAAO,QAAUA,EAAO,OAAO,OAAS,EAAG,CAE9C,IAAIC,EAAeD,EAAO,OAAO,KAAK,GAAG,EAQzC,GAPIA,EAAO,YAEVC,EAAe,GADID,EAAO,OAAO,IAAKE,GAAQ,QAAQA,CAAG,GAAG,EAC/B,KAAK,EAAE,CAAC,MAKlC,CAHU,IAAI,OAAOD,EAAcL,CAAQ,EAGpC,KAAKG,CAAO,EAEf,MAAA,EAGT,CACO,MAAA,EACR,CAQO,UAAUjC,EAAa,KAAK,KAAMf,EAAY,KAAK,UAAW,CAGpEe,EAAaA,EAAW,cAExB,MAAMqC,EAAc,KAAK,KAAK,UAAWnB,GAAQA,IAAQlB,CAAU,EAEnE,GAAIqC,GAAe,GAAK,KAAK,UAAU,OAAS,EAAG,CAKlD,MAAMC,EAAa,KAAK,WAAW,KAAK,UAAWD,CAAW,EAE9D,KAAK,aAAa,QAAQ,CAACE,EAAab,IAAM,CACzCA,IAAMW,EACGE,EAAA,UAAU,IAAI,QAAQ,EAEtBA,EAAA,UAAU,OAAO,QAAQ,CACtC,CACA,EAGD,KAAK,IAAI,QAAQ,CAACzB,EAAIY,IAAM,CACrB,MAAAc,EAAWd,IAAMW,EAAcpD,EAAY,OAC9C6B,EAAA,aAAa,YAAa0B,CAAQ,CAAA,CACrC,EAED,KAAK,WAAWF,CAAU,CAC3B,CAGD,CAIQ,WAAW3B,EAAmB0B,EAAkC,CACvE,OAAO1B,EAAK,KAAK,CAAC8B,EAAIC,IAAO,CAExB,GAAA,KAAK,YAAc,aAAc,CACpC,MAAMC,EAAOF,EACRA,EAAAC,EACAA,EAAAC,CACN,CAGM,MAAAC,EAAKH,EAAG,SAASJ,CAAW,EAC5BQ,EAAKH,EAAG,SAASL,CAAW,EAC5BS,EAAYF,EAAG,YAAY,KAC3BG,EAAYF,EAAG,YAAY,KAEjC,SAASG,EAASC,EAAW,CAC5B,MAAO,CAAC,MAAM,OAAOA,CAAC,CAAC,CACxB,CAEA,GAAID,EAASF,CAAC,GAAKE,EAASD,CAAC,EAAG,CACzB,MAAAG,EAAO,OAAOJ,CAAC,EACfK,EAAO,OAAOJ,CAAC,EACrB,GAAIG,EAAOC,EAAa,MAAA,GACxB,GAAID,EAAOC,EAAa,MAAA,EACzB,CACA,OAAI,OAAOL,GAAM,UAAY,OAAOC,GAAM,SAClCD,EAAE,cAAcC,CAAC,EAElB,CAAA,CACP,CACF,CAEQ,aAAarB,EAAoB,CAGxC,MAAM0B,EAAa,KAAK,WACxB,GAAIA,IAAe,EAAU,MAAA,GAC7B,MAAMC,EAAaD,GAAc,KAAK,KAAO,GAAK,EAC5CE,EAAWF,EAAa,KAAK,KAC5B,OAAA1B,EAAI,EAAI2B,GAAc3B,GAAK4B,CACnC,CAEQ,WAAW3C,EAAoB,KAAK,UAAiB,CAKtD,MAAAE,EAAW,SAAS,yBAE1B,IAAI0C,EAAY,EAmBZ,GAhBC5C,EAAA,QAASa,GAAQ,CAChBA,EAAI,SAAS+B,IAEd/B,EAAI,SAAW,CAAC,KAAK,aAAa+B,CAAS,EAC9C/B,EAAI,MAAM,QAAU,QAEpBA,EAAI,MAAM,QAAU,GACpBX,EAAS,YAAYW,CAAG,EACzB,CACA,EAED,KAAK,MAAM,MAAM,QAAU+B,IAAc,EAAI,qBAAuB,OAE/D,KAAA,MAAM,QAAQ1C,CAAQ,EAGvB,KAAK,WAAa,EAAG,CAIxB,IAAI2C,EAAc,KAAK,KACvB,MAAMC,EAAgB,KAAK,KAAKF,EAAY,KAAK,UAAU,EAGvDC,EAAcC,IACjBD,EAAcC,GAAiB,GAI1B,MAAArE,EAAwB,SAAS,cAAc,yBAAyB,EAE9E,GAAIA,EAAuB,CAC1B,MAAMsE,EAAyB,CAAA,EAC3B,KAAK,OAASF,IACjBE,EAAM,KAAOF,GAEV,KAAK,YAAcD,IACtBG,EAAM,UAAYH,GAEf,OAAO,KAAKG,CAAK,EAAE,OAAS,GAC/BtE,EAAsB,SAASsE,CAAK,CAEtC,CAEA,KAAK,KAAOF,CACb,CAEA,KAAK,UAAYD,CAGlB,CACD,CAEA,eAAe,OAAO,eAAgB1E,CAAW"}