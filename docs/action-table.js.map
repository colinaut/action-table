{"version":3,"file":"action-table.js","sources":["../src/action-table.ts"],"sourcesContent":["import { ColsArray, FiltersObject, SingleFilterObject } from \"./types\";\nimport { ActionTableFilters } from \"./action-table-filters\";\nexport class ActionTable extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprivate tbody!: HTMLTableSectionElement;\n\tprivate tfoot!: HTMLTableSectionElement;\n\tprivate ths!: NodeListOf<HTMLTableCellElement>;\n\tpublic cols: ColsArray = [];\n\tpublic filters: FiltersObject = {};\n\tprivate rowsArray!: Array<HTMLTableRowElement>;\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                                 Attributes                                 */\n\t/* -------------------------------------------------------------------------- */\n\n\tstatic get observedAttributes(): string[] {\n\t\treturn [\"sort\", \"direction\", \"store\", \"params\"];\n\t}\n\n\t// sort attribute to set the sort column\n\n\tget sort(): string {\n\t\treturn this.getAttribute(\"sort\")?.trim().toLowerCase() || \"\";\n\t}\n\tset sort(value: string) {\n\t\tthis.setAttribute(\"sort\", value);\n\t}\n\n\t// direction attribute to set the sort direction\n\tget direction(): \"ascending\" | \"descending\" {\n\t\tconst direction = this.getAttribute(\"direction\")?.trim().toLowerCase();\n\t\tif (direction === \"ascending\" || direction === \"descending\") {\n\t\t\treturn direction;\n\t\t}\n\t\treturn \"ascending\";\n\t}\n\tset direction(value: \"ascending\" | \"descending\") {\n\t\tthis.setAttribute(\"direction\", value);\n\t}\n\n\t// store attribute to trigger loading and saving to sort and filters localStorage\n\tget store(): boolean {\n\t\treturn this.hasAttribute(\"store\");\n\t}\n\n\t// URLparams attribute to trigger checking URL params on load\n\tget URLparams(): boolean {\n\t\treturn this.hasAttribute(\"urlparams\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                             Connected Callback                             */\n\t/* -------------------------------------------------------------------------- */\n\n\tpublic connectedCallback(): void {\n\t\t// 1. Get local storage for sort and filters. Overrides attributes\n\t\tthis.getLocalStorage();\n\n\t\t// 2. Get URL params. Overrides local storage and attributes\n\t\tthis.getURLParams();\n\n\t\t// 3. Get table, tbody, rows, and column names\n\t\tthis.getTable();\n\n\t\t// 4. Add no results tfoot message\n\t\tthis.addNoResultsTfoot();\n\n\t\t// 5. Sort & Filter Table if they have values\n\t\tif (this.sort) this.sortTable();\n\t\tif (Object.keys(this.filters).length > 0) {\n\t\t\tthis.initialFilter();\n\t\t}\n\n\t\t// 7. Add Event Listeners\n\t\tthis.addEventListeners();\n\t}\n\n\tprivate async initialFilter() {\n\t\tconst customEls = await this.waitForCustomElements();\n\t\tif (customEls.length > 0) {\n\t\t\tconst actionTableFilters = customEls.find((el) => el.tagName.toLowerCase() === \"action-table-filters\") as ActionTableFilters;\n\t\t\tif (actionTableFilters) {\n\t\t\t\tactionTableFilters.setFilterElements(this.filters);\n\t\t\t}\n\t\t}\n\t\tthis.filterTable();\n\n\t\tif (this.rowsShown.length === 0) {\n\t\t\tthis.resetFilters();\n\t\t\tthis.resetAllFilterElements();\n\t\t}\n\t}\n\n\tprivate async waitForCustomElements(): Promise<Element[]> {\n\t\t// 1. Get any custom elements\n\t\tconst customElementsArray = Array.from(this.querySelectorAll(\"*\")).filter((el) => el.tagName.indexOf(\"-\") !== -1);\n\n\t\t// 2. Return if empty or all custom elements are defined\n\t\tconst allDefined = customElementsArray.every((element) => element && customElements.get(element.tagName.toLowerCase()));\n\t\tif (allDefined) {\n\t\t\treturn customElementsArray;\n\t\t}\n\t\t// 3. Create custom elements when defined Array\n\t\tconst customElementsDefinedArray = customElementsArray.map((element) => customElements.whenDefined(element.tagName.toLowerCase()));\n\t\t// 4. Create Timeout Promise\n\t\tconst timeoutPromise = new Promise<Element[]>((_, reject) => setTimeout(() => reject(\"Timeout\"), 300));\n\t\ttry {\n\t\t\t// 5. Wait for custom elements or timeout\n\t\t\tawait Promise.race([Promise.all(customElementsDefinedArray), timeoutPromise]);\n\t\t\treturn customElementsArray;\n\t\t} catch (error) {\n\t\t\t// Handle timeout error here\n\t\t\tconsole.error(\"Timeout occurred while waiting for custom elements\");\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                         Attribute Changed Callback                        */\n\t/* -------------------------------------------------------------------------- */\n\n\tpublic attributeChangedCallback(name: string) {\n\t\tif (name === \"sort\" || name === \"direction\") {\n\t\t\tthis.sortTable();\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                               PRIVATE METHODS                              */\n\t/* -------------------------------------------------------------------------- */\n\n\t/* -------------------------------------------------------------------------- */\n\t/*            Private Method: get localStorage for sort and filters           */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getLocalStorage(): void {\n\t\tif (!this.store) return;\n\t\t// 1. Get sort and direction from local storage\n\n\t\tconst lsActionTable = localStorage.getItem(\"action-table\");\n\t\tif (lsActionTable) {\n\t\t\tconst lsActionTableJSON = JSON.parse(lsActionTable) as { sort: string; direction: \"ascending\" | \"descending\" };\n\t\t\tthis.sort = lsActionTableJSON.sort;\n\t\t\tthis.direction = lsActionTableJSON.direction;\n\t\t}\n\n\t\t// 2. Get filters from localStorage\n\t\tconst lsActionTableFilters = localStorage.getItem(\"action-table-filters\");\n\t\tif (lsActionTableFilters) {\n\t\t\tthis.filters = JSON.parse(lsActionTableFilters) as FiltersObject;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*         Private Method: get URLSearchParams for sort and filters           */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getURLParams(): void {\n\t\tif (!this.URLparams) return;\n\t\tconst params = new URLSearchParams(window.location.search);\n\t\tif (params.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\t// Get sort and direction from URL\n\t\tthis.sort = params.get(\"sort\") || this.sort;\n\t\tconst direction = params.get(\"direction\");\n\t\tif (direction === \"ascending\" || direction === \"descending\") {\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\t// sort through remaining params for filters to create a filters object\n\t\tconst filters: FiltersObject = {};\n\t\tfor (const [key, value] of params.entries()) {\n\t\t\tif (key !== \"sort\" && key !== \"direction\") {\n\t\t\t\tfilters[key].values = [value];\n\t\t\t}\n\t\t}\n\n\t\t// if filters object is not empty, set this.filters\n\t\tif (Object.keys(filters).length > 0) {\n\t\t\tthis.filters = filters;\n\t\t}\n\n\t\t// console.log(params, this.filters);\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*           Private Method: get table, tbody, rows, and column names         */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getTable(): void {\n\t\tconst table = this.querySelector(\"table\") as HTMLTableElement;\n\t\tthis.tbody = table.querySelector(\"tbody\") as HTMLTableSectionElement;\n\t\tconst rows = this.tbody.querySelectorAll(\"tbody tr\") as NodeListOf<HTMLTableRowElement>;\n\t\tthis.rowsArray = Array.from(rows);\n\t\tthis.getColumns(table);\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                 Private Method: get columns from table                      */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getColumns(table: HTMLTableElement): ColsArray {\n\t\t// 1. Get column headers\n\t\tthis.ths = table.querySelectorAll(\"th\");\n\t\tif (this.ths) {\n\t\t\tthis.ths.forEach((th) => {\n\t\t\t\t// 2. Column name is based on data-col attribute or results of getCellContent() function\n\t\t\t\tlet name = th.dataset.col || this.getCellContent(th);\n\t\t\t\t// 3. Remove whitespace and convert to lowercase\n\t\t\t\tname = name.trim().toLowerCase();\n\t\t\t\tif (name) {\n\t\t\t\t\t// 4. Add column name to cols array\n\t\t\t\t\tthis.cols.push({ name: name });\n\t\t\t\t\t// 5. Set data-col attribute just in case it is\n\t\t\t\t\tth.dataset.col = name;\n\t\t\t\t\t// 6. if the column is sortable then wrap it in a button, and add aria\n\t\t\t\t\tif (!th.hasAttribute(\"no-sort\")) {\n\t\t\t\t\t\tth.innerHTML = `<button data-col=\"${name}\">${th.innerHTML}</button>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t// console.log(\"action-table cols\", this.cols);\n\t\t// 7. Return cols array\n\t\treturn this.cols;\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*               Private Method: add a No Results tfoot message               */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate addNoResultsTfoot() {\n\t\tconst tfoot = document.createElement(\"tfoot\");\n\t\ttfoot.classList.add(\"no-results\");\n\t\ttfoot.innerHTML = `<tr><td colspan=\"${this.cols.length}\"><p>No Results</p> <p><button>Reset Filters</button></p></td></tr>`;\n\t\ttfoot.addEventListener(\"click\", (e) => {\n\t\t\tconst button = e.target as HTMLButtonElement;\n\t\t\tif (button.tagName !== \"BUTTON\") return;\n\t\t\tthis.resetFilters();\n\t\t\tthis.resetAllFilterElements();\n\t\t\tthis.showTfoot(false);\n\t\t});\n\t\tthis.tfoot = tfoot;\n\t\tthis.showTfoot(false);\n\t\tthis.tbody.after(this.tfoot);\n\t}\n\n\t/* ----------------------------- Hide/Show TFOOT ---------------------------- */\n\tprivate showTfoot(show = true) {\n\t\tif (this.tfoot) {\n\t\t\tthis.tfoot.style.display = show ? \"table-footer-group\" : \"none\";\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*        Private Method: reset all action-table-filters elements             */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate resetAllFilterElements() {\n\t\tconst actionTableFilters = this.querySelector(\"action-table-filters\") as ActionTableFilters;\n\t\tif (actionTableFilters) {\n\t\t\tactionTableFilters.resetAllFilterElements();\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                  Private Method: add event listeners                        */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate addEventListeners(): void {\n\t\tthis.addEventListener(\n\t\t\t\"click\",\n\t\t\t(event) => {\n\t\t\t\tconst el = event.target as HTMLTableCellElement;\n\t\t\t\tif (el.tagName === \"BUTTON\") {\n\t\t\t\t\tif (el.dataset.sortable === \"false\") return;\n\t\t\t\t\tlet name = el.dataset.col;\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tif (this.sort === name && this.direction === \"ascending\") {\n\t\t\t\t\t\t\tthis.direction = \"descending\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.sort = name;\n\t\t\t\t\t\t\tthis.direction = \"ascending\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.sortTable();\n\t\t\t\t\t\tif (this.store) localStorage.setItem(\"action-table\", JSON.stringify({ sort: this.sort, direction: this.direction }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t}\n\n\tprivate setFiltersLocalStorage() {\n\t\tif (this.store) localStorage.setItem(\"action-table-filters\", JSON.stringify(this.filters));\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                               PUBLIC METHODS                               */\n\t/* -------------------------------------------------------------------------- */\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Public Method: reset filters                        */\n\t/* -------------------------------------------------------------------------- */\n\n\tpublic resetFilters(): void {\n\t\t// remove all filters from this.col then call filterTable\n\t\tthis.filters = {};\n\t\tthis.setFiltersLocalStorage();\n\t\tthis.filterTable();\n\t\tthis.showTfoot(false);\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Public Method: get cell content                        */\n\t/* -------------------------------------------------------------------------- */\n\tpublic getCellContent(cell: HTMLTableCellElement): string {\n\t\t// 1. get cell content with dataset or innerText\n\t\tlet cellContent: string = cell.dataset.sort || cell.innerText || \"\";\n\t\t// 2. trim to make sure it's not just spaces\n\t\tcellContent = cellContent?.trim();\n\n\t\t// 3. if there is no cell content then check...\n\t\tif (!cellContent) {\n\t\t\t// 3.1 if there is an svg then get title; otherwise return empty string\n\t\t\tconst svg = cell.querySelector(\"svg\") as SVGElement;\n\t\t\tif (svg) {\n\t\t\t\tcellContent = svg.querySelector(\"title\")?.textContent || \"\";\n\t\t\t}\n\t\t\t// 3.2 if checkbox element then get value if checked\n\t\t\tconst checkbox = cell.querySelector(\"[type=checkbox]\") as HTMLInputElement;\n\t\t\tif (checkbox?.checked) {\n\t\t\t\tcellContent = checkbox.value;\n\t\t\t}\n\t\t}\n\t\treturn cellContent.trim();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*            Public Method: filter table on column name and value            */\n\t/* -------------------------------------------------------------------------- */\n\tpublic filterTable(columnName: string = \"\", values: string[] = [], exclusive = false, regexOpt = \"i\"): void {\n\t\tcolumnName = columnName.trim().toLowerCase();\n\n\t\t// 1. If col then store filter value locally and in localStorage; otherwise filter table based on existed filter\n\t\tif (columnName !== \"\") {\n\t\t\tif (!this.filters[columnName]) {\n\t\t\t\tthis.filters[columnName] = { values: [] };\n\t\t\t}\n\n\t\t\tthis.filters[columnName].values = values;\n\n\t\t\tif (exclusive) this.filters[columnName].exclusive = exclusive;\n\t\t\tthis.setFiltersLocalStorage();\n\t\t}\n\t\t// console.log(\"filters\", this.filters);\n\n\t\t// function to see test content vs filterValue\n\t\tfunction shouldHide(filter: SingleFilterObject, content: string): boolean {\n\t\t\t// console.log(\"shouldHide\", filterValue, content);\n\t\t\tif (filter.values && filter.values.length > 0) {\n\t\t\t\t// 1. build regex from filterValues array (checkboxes and select menus send arrays)\n\t\t\t\tlet regexPattern = filter.values.join(\"|\");\n\t\t\t\tif (filter.exclusive) {\n\t\t\t\t\tconst regexParts = filter.values.map((str) => `(?=.*${str})`);\n\t\t\t\t\tregexPattern = `${regexParts.join(\"\")}.*`;\n\t\t\t\t}\n\t\t\t\tconst regex = new RegExp(regexPattern, regexOpt);\n\t\t\t\t// 2. check if content matches\n\t\t\t\tif (!regex.test(content)) {\n\t\t\t\t\t// console.log(\"hide\", columnName, content);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// 2. get filter value for whole row based on special reserved name \"action-table\"\n\t\tconst filterForWholeRow = this.filters[\"action-table\"];\n\n\t\t// 3. Filter based on filter value\n\t\tthis.rowsArray.forEach((row) => {\n\t\t\t// 3.1 set base display value as \"\"\n\t\t\tlet display = \"\";\n\t\t\t// 3.2 get td cells\n\t\t\tconst cells = row.querySelectorAll(\"td\") as NodeListOf<HTMLTableCellElement>;\n\t\t\t// 3.3 if filter value for whole row exists then run filter against innerText of entire row content\n\t\t\tif (filterForWholeRow) {\n\t\t\t\tif (shouldHide(filterForWholeRow, row.innerText)) {\n\t\t\t\t\tdisplay = \"none\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 3.4 if columnName is not action-table then run filter against td cell content\n\t\t\tcells.forEach((cell, i) => {\n\t\t\t\tconst content = this.dataset.filter || this.getCellContent(cell);\n\t\t\t\tlet filter = this.filters[this.cols[i].name];\n\t\t\t\tif (!filter) return;\n\t\t\t\tif (shouldHide(filter, content)) {\n\t\t\t\t\tdisplay = \"none\";\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// 3.5 set display\n\t\t\trow.style.display = display;\n\t\t});\n\n\t\tif (this.rowsShown.length === 0) {\n\t\t\tconsole.error(\"All rows hidden!\");\n\t\t\tthis.showTfoot();\n\t\t} else {\n\t\t\tthis.showTfoot(false);\n\t\t}\n\t}\n\n\t// Simple rowsShown getter; not an attribute\n\tget rowsShown() {\n\t\treturn this.rowsArray.filter((row) => row.style.display !== \"none\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*        Public Method: sort table based on column name and direction        */\n\t/* -------------------------------------------------------------------------- */\n\tpublic sortTable(columnName = this.sort, direction = this.direction) {\n\t\tcolumnName = columnName.toLowerCase();\n\t\t// 1. Get column index from column name\n\t\tconst columnIndex = this.cols.findIndex((c) => c.name === columnName);\n\t\t// 2. If column exists and there are rows then sort\n\t\tif (columnIndex >= 0 && this.rowsArray.length > 0) {\n\t\t\tconsole.log(`sort by ${columnName} ${direction}`);\n\n\t\t\t// 1. Sort rows\n\t\t\tthis.customSort(this.rowsArray, columnIndex);\n\n\t\t\t// 2. Update DOM\n\t\t\tthis.rowsArray.forEach((row, i) => {\n\t\t\t\t// 2.1 Add row to tbody\n\t\t\t\tthis.tbody.appendChild(row);\n\n\t\t\t\t// 2.1 On first row, update aria-sort on ths\n\t\t\t\tif (i < 1) {\n\t\t\t\t\tthis.ths.forEach((th, i) => {\n\t\t\t\t\t\tconst ariaSort = i === columnIndex ? direction : \"none\";\n\t\t\t\t\t\tth.setAttribute(\"aria-sort\", ariaSort);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// 2.3 Add/Remove sorted class based on columnIndex\n\t\t\t\tconst cells = row.querySelectorAll(\"td\");\n\t\t\t\tcells.forEach((cell, i) => {\n\t\t\t\t\tif (i === columnIndex) {\n\t\t\t\t\t\tcell.classList.add(\"sorted\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcell.classList.remove(\"sorted\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate customSort(rows: HTMLTableRowElement[], columnIndex: number): HTMLTableRowElement[] {\n\t\treturn rows.sort((r1, r2) => {\n\t\t\t// 1. If descending sort, swap rows\n\t\t\tif (this.direction === \"descending\") {\n\t\t\t\tconst temp = r1;\n\t\t\t\tr1 = r2;\n\t\t\t\tr2 = temp;\n\t\t\t}\n\n\t\t\t// 2. Get content\n\t\t\tconst c1 = r1.children[columnIndex] as HTMLTableCellElement;\n\t\t\tconst c2 = r2.children[columnIndex] as HTMLTableCellElement;\n\t\t\tlet v1 = this.getCellContent(c1);\n\t\t\tlet v2 = this.getCellContent(c2);\n\n\t\t\tfunction isNumber(s: string) {\n\t\t\t\treturn !isNaN(parseFloat(s));\n\t\t\t}\n\n\t\t\t// 1. If both values are numbers, sort by number\n\t\t\tif (isNumber(v1) && isNumber(v2)) {\n\t\t\t\t// console.log(\"Both numbers\", v1, v2);\n\t\t\t\treturn parseFloat(v1) - parseFloat(v2);\n\t\t\t}\n\t\t\t// 2. If only one of the values is a number, prioritize it\n\t\t\tif (isNumber(v1)) {\n\t\t\t\t// console.log(\"Is Number\", v1);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (isNumber(v2)) {\n\t\t\t\t// console.log(\"Is Number\", v2);\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// 3. If both values are strings, sort by string\n\t\t\t// console.log(\"both string\", v1, v2);\n\n\t\t\treturn v1.localeCompare(v2);\n\t\t});\n\t}\n}\n\ncustomElements.define(\"action-table\", ActionTable);\n"],"names":["ActionTable","__publicField","_a","value","direction","customEls","actionTableFilters","el","customElementsArray","element","customElementsDefinedArray","timeoutPromise","_","reject","name","lsActionTable","lsActionTableJSON","lsActionTableFilters","params","filters","key","table","rows","th","tfoot","show","event","cell","cellContent","svg","checkbox","columnName","values","exclusive","regexOpt","shouldHide","filter","content","regexPattern","str","filterForWholeRow","row","display","cells","i","columnIndex","c","ariaSort","r1","r2","temp","c1","c2","v1","v2","isNumber","s"],"mappings":"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"}