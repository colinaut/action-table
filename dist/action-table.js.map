{"version":3,"file":"action-table.js","sources":["../src/action-table-no-results.ts","../src/action-table.ts"],"sourcesContent":["import { FiltersObject } from \"./types\";\nimport type { ActionTable } from \"./action-table\";\n\n/* -------------------------------------------------------------------------- */\n/*                           Action Table No Results                          */\n/* -------------------------------------------------------------------------- */\n/* ---------- Simple HTML element wrapper to allow reset of filters --------- */\n\nexport class ActionTableNoResults extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t\tconst actionTable = this.closest(\"action-table\") as ActionTable;\n\t\tconst { rowsVisible } = actionTable;\n\t\tif (rowsVisible === 0) {\n\t\t\tthis.style.display = \"\";\n\t\t} else {\n\t\t\tthis.style.display = \"none\";\n\t\t}\n\t\tthis.addEventListener(\"click\", (e) => {\n\t\t\t// if target is reset button\n\t\t\tif (e.target instanceof HTMLButtonElement && e.target.type === \"reset\") {\n\t\t\t\t// reset the filters on the table element\n\t\t\t\tthis.dispatchEvent(\n\t\t\t\t\tnew CustomEvent<FiltersObject>(\"action-table-filter\", {\n\t\t\t\t\t\tbubbles: true,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\t// reset the filters on the action-table-filters\n\t\t\t\tthis.dispatchEvent(new CustomEvent<undefined>(\"action-table-filters-reset\", { bubbles: true }));\n\t\t\t}\n\t\t});\n\n\t\tactionTable.addEventListener(\"action-table\", (e) => {\n\t\t\tconst detail = e.detail;\n\t\t\tconsole.log(\"action-table\", detail);\n\n\t\t\tif (detail?.rowsVisible === 0) {\n\t\t\t\tthis.style.display = \"\";\n\t\t\t} else {\n\t\t\t\tthis.style.display = \"none\";\n\t\t\t}\n\t\t});\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                              Private Methods                              */\n\t/* -------------------------------------------------------------------------- */\n\n\t/* ----------------- Send Event Triggered by checkbox change ---------------- */\n}\n\ncustomElements.define(\"action-table-no-results\", ActionTableNoResults);\n","import { ColsArray, FiltersObject, SingleFilterObject, ActionCell, ActionRow, ActionTableEventDetail, UpdateContentDetail, Direction, ActionTableStore } from \"./types\";\nimport \"./action-table-no-results\";\n\nexport class ActionTable extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/* -------------------------------------------------------------------------- */\n\t\t/*                                    Init                                    */\n\t\t/* -------------------------------------------------------------------------- */\n\t\t/* ------------------- Only fires once on js initial load ------------------- */\n\t\t/* --------------- Does not require the inner DOM to be ready --------------- */\n\n\t\t// 1. Get sort and direction and filters from local storage\n\t\tif (this.store) {\n\t\t\t// 1. Get sort and direction and filters from local storage\n\t\t\tconst lsActionTable = this.getStore();\n\t\t\tif (lsActionTable) {\n\t\t\t\tthis.sort = lsActionTable.sort || this.sort;\n\t\t\t\tthis.direction = lsActionTable.direction || this.direction;\n\t\t\t\tthis.filters = lsActionTable.filters || this.filters;\n\t\t\t}\n\t\t}\n\n\t\t// 2. Get sort and direction and filters from URL (overrides local storage)\n\t\tif (this.hasAttribute(\"urlparams\")) {\n\t\t\tconst params = new URLSearchParams(window.location.search);\n\n\t\t\t// sort through remaining params for filters to create a filters object\n\t\t\tconst filters: FiltersObject = {};\n\t\t\tfor (let [key, value] of params.entries()) {\n\t\t\t\tkey = key.toLowerCase();\n\t\t\t\tvalue = value.toLowerCase();\n\t\t\t\t// Only add key if it's not sort or direction\n\t\t\t\tif (key !== \"sort\" && key !== \"direction\") {\n\t\t\t\t\t// check for value and if so add it to the array.\n\t\t\t\t\tif (filters[key]?.values) {\n\t\t\t\t\t\tfilters[key].values.push(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if not, create it\n\t\t\t\t\t\tfilters[key] = { values: [value] };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (key === \"sort\") {\n\t\t\t\t\tthis.sort = value;\n\t\t\t\t}\n\t\t\t\tif (key === \"direction\" && (value === \"ascending\" || value === \"descending\")) {\n\t\t\t\t\tthis.direction = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if filters object is not empty, set this.filters\n\t\t\tif (Object.keys(filters).length > 0) {\n\t\t\t\tthis.setFiltersObject(filters);\n\t\t\t}\n\t\t}\n\n\t\tthis.addEventListeners();\n\t}\n\n\tpublic table!: HTMLTableElement;\n\tpublic tbody!: HTMLTableSectionElement;\n\tpublic cols: ColsArray = [];\n\tpublic rows: Array<ActionRow> = [];\n\tpublic filters: FiltersObject = {};\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                                 Attributes                                 */\n\t/* -------------------------------------------------------------------------- */\n\n\t// sort attribute to set the sort column\n\n\tget sort(): string {\n\t\treturn this.getCleanAttr(\"sort\");\n\t}\n\tset sort(value: string) {\n\t\tthis.setAttribute(\"sort\", value);\n\t}\n\n\t// direction attribute to set the sort direction\n\tget direction(): Direction {\n\t\tconst direction = this.getCleanAttr(\"direction\");\n\t\tif (direction === \"ascending\" || direction === \"descending\") {\n\t\t\treturn direction;\n\t\t}\n\t\treturn \"ascending\";\n\t}\n\tset direction(value: Direction) {\n\t\tthis.setAttribute(\"direction\", value);\n\t}\n\n\t// store attribute to trigger loading and saving to sort and filters localStorage\n\tget store(): string {\n\t\treturn this.hasAttribute(\"store\") ? this.getCleanAttr(\"store\") || \"action-table\" : \"\";\n\t}\n\n\tget pagination(): number {\n\t\treturn Number(this.getCleanAttr(\"pagination\")) || 0;\n\t}\n\n\tset pagination(value: number) {\n\t\tthis.setAttribute(\"pagination\", value.toString());\n\t}\n\n\tget page(): number {\n\t\treturn Number(this.getCleanAttr(\"page\")) || 1;\n\t}\n\n\tset page(value: number) {\n\t\tvalue = this.checkPage(value);\n\t\tthis.setAttribute(\"page\", value.toString());\n\t}\n\n\tprivate checkPage(page: number): number {\n\t\treturn Math.max(1, Math.min(page, this.numberOfPages));\n\t}\n\n\tprivate dispatch(detail: ActionTableEventDetail) {\n\t\tconsole.log(\"dispatch\", detail);\n\t\tthis.dispatchEvent(\n\t\t\tnew CustomEvent<ActionTableEventDetail>(\"action-table\", {\n\t\t\t\tdetail,\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate getCleanAttr(attr: string): string {\n\t\treturn this.getAttribute(attr)?.trim().toLowerCase() || \"\";\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                             Connected Callback                             */\n\t/* -------------------------------------------------------------------------- */\n\t/* ------------- Fires every time the event is added to the DOM ------------- */\n\n\tpublic connectedCallback(): void {\n\t\t/* -------------- Init code which requires DOM to be ready -------------- */\n\t\tconsole.time(\"Connected Callback\");\n\n\t\t// 1. Get table, tbody, rows, and column names in this.cols\n\t\tconst table = this.querySelector(\"table\");\n\t\t// make sure table with thead and tbody exists\n\t\tif (table && table.querySelector(\"thead tr th\") && table.querySelector(\"tbody tr td\")) {\n\t\t\tthis.table = table;\n\t\t\t// casting type as we know it exists due to querySelector above\n\t\t\tthis.tbody = table.querySelector(\"tbody\") as HTMLTableSectionElement;\n\t\t\tthis.rows = Array.from(table.querySelectorAll(\"tbody tr\")) as Array<ActionRow>;\n\t\t} else {\n\t\t\tthrow new Error(\"Could not find table with thead and tbody in action-table\");\n\t\t}\n\n\t\tconst hasFilters = Object.keys(this.filters).length > 0;\n\n\t\t// 2. If no filter or sort then append rows now as we don't need to know the header or cell data\n\t\tif (!hasFilters && !this.sort) {\n\t\t\tthis.appendRows();\n\t\t} else {\n\t\t\t// If there are sort or filters then hide tbody; it will be shown when rows are appended later after sort and filter\n\t\t\tthis.tbody.style.display = \"none\";\n\t\t}\n\n\t\t// 3. get column names and add sort buttons\n\t\tthis.getColumns();\n\n\t\t// 4. Get table content\n\t\tthis.getTableContent();\n\n\t\t// 6. if filters or sort then trigger sort and filter and append rows\n\t\tif (hasFilters || this.sort) {\n\t\t\t// 6.1 remove filters that are not in the table\n\t\t\tObject.keys(this.filters).forEach((key) => {\n\t\t\t\tif (!this.cols.some((col) => col.name === key)) {\n\t\t\t\t\tdelete this.filters[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\t// 6.2 sort, filter, and append rows\n\t\t\tthis.sortAndFilter();\n\t\t}\n\n\t\t// 7. Add mutation observer to tbody\n\t\tthis.addObserver();\n\n\t\tconsole.timeEnd(\"Connected Callback\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                         Attribute Changed Callback                        */\n\t/* -------------------------------------------------------------------------- */\n\n\tstatic get observedAttributes(): string[] {\n\t\treturn [\"sort\", \"direction\", \"pagination\", \"page\"];\n\t}\n\tpublic attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t\t// only fires if the value actually changes and if the rows is not empty, which means it has grabbed the cellContent\n\t\tif (oldValue !== newValue && this.rows.length > 0) {\n\t\t\tif (name === \"sort\" || name === \"direction\") {\n\t\t\t\tthis.sortTable();\n\t\t\t}\n\t\t\tif (name === \"pagination\") {\n\t\t\t\t// console.log(\"attributeChangedCallback: pagination\", oldValue, newValue);\n\t\t\t\tthis.dispatch({ pagination: this.pagination });\n\t\t\t}\n\t\t\tthis.appendRows();\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                               PRIVATE METHODS                              */\n\t/* -------------------------------------------------------------------------- */\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                           Filter variable methods                          */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate setFiltersObject(filters: FiltersObject = {}): void {\n\t\t// If set empty it resets filters to default\n\n\t\tthis.filters = filters;\n\n\t\tif (this.store) this.setStore({ filters: this.filters });\n\t}\n\n\t/* ----------- Used by reset button and action-table-filter event ----------- */\n\tprivate setFilters(filters: FiltersObject = {}) {\n\t\tthis.setFiltersObject(filters);\n\t\tthis.filterTable();\n\t\tthis.appendRows();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                  Private Method: add event listeners                       */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate addEventListeners(): void {\n\t\t// Sort buttons\n\t\tthis.addEventListener(\n\t\t\t\"click\",\n\t\t\t(event) => {\n\t\t\t\tconst el = event.target;\n\t\t\t\t// only fire if event target is a button with data-col\n\t\t\t\tif (el instanceof HTMLButtonElement && el.dataset.col) {\n\t\t\t\t\tconst name = el.dataset.col;\n\t\t\t\t\tlet direction: Direction = \"ascending\";\n\t\t\t\t\tif (this.sort === name && this.direction === \"ascending\") {\n\t\t\t\t\t\tdirection = \"descending\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.sort = name;\n\t\t\t\t\tthis.direction = direction;\n\t\t\t\t\tif (this.store) this.setStore({ sort: this.sort, direction: direction });\n\t\t\t\t}\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\n\t\t// Listens for checkboxes in the table since mutation observer does not support checkbox changes\n\t\tthis.addEventListener(\"change\", (event) => {\n\t\t\tconst el = event.target;\n\t\t\t// only fire if event target is a checkbox in a td; this stops it firing for filters\n\t\t\tif (el instanceof HTMLInputElement && el.closest(\"td\") && el.type === \"checkbox\") {\n\t\t\t\t// get new content, sort and filter. This works for checkboxes and action-table-switch\n\t\t\t\tconsole.log(\"event change\", el);\n\t\t\t\tthis.updateContent(el);\n\t\t\t}\n\t\t});\n\n\t\t// Listens for action-table-filter event from action-table-filters\n\t\tthis.addEventListener(`action-table-filter`, (event) => {\n\t\t\tif (event.detail) {\n\t\t\t\t// 1. If detail is defined then add it to the filters object\n\t\t\t\tconst filters = { ...this.filters, ...event.detail };\n\t\t\t\t// 2. Remove empty filters\n\t\t\t\tObject.keys(filters).forEach((key) => {\n\t\t\t\t\tif (filters[key].values.every((value) => value === \"\")) {\n\t\t\t\t\t\tdelete filters[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// 3. Set filters with new filters object\n\t\t\t\tthis.setFilters(filters);\n\t\t\t} else {\n\t\t\t\t// 3. if no detail than reset filters by calling setFilters with empty object\n\t\t\t\tthis.setFilters();\n\t\t\t}\n\t\t});\n\n\t\t// Listens for action-table-update event used by custom elements that want to announce content changes\n\t\tthis.addEventListener(`action-table-update`, (event) => {\n\t\t\tconst target = event.target;\n\t\t\tif (target instanceof Element) {\n\t\t\t\t// console.log(\"🥳 action-table: update event\", update);\n\t\t\t\tthis.updateContent(target, event.detail);\n\t\t\t}\n\t\t});\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                      Private Method: Get localStorage                      */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getStore() {\n\t\ttry {\n\t\t\tconst ls = localStorage.getItem(this.store);\n\t\t\tconst data = ls && JSON.parse(ls);\n\t\t\tif (typeof data === \"object\" && data !== null) {\n\t\t\t\tconst hasKeys = [\"sort\", \"direction\", \"filters\"].some((key) => key in data);\n\t\t\t\tif (hasKeys) return data as ActionTableStore;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                      Private Method: Set localStorage                      */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate setStore(data: ActionTableStore) {\n\t\tconst lsData = this.getStore() || {};\n\t\tif (lsData) {\n\t\t\tdata = { ...lsData, ...data };\n\t\t}\n\t\tlocalStorage.setItem(this.store, JSON.stringify(data));\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                       Private Method: update content                       */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate updateContent(el: Element, update: UpdateContentDetail = {}): void {\n\t\tconst cell = (el.matches(\"td\") ? el : el.closest(\"td\")) as ActionCell;\n\t\tif (!cell) return;\n\t\tupdate = typeof update === \"string\" ? { sort: update, filter: update } : update;\n\t\tthis.setCellContent(cell, update);\n\t\tthis.sortAndFilter();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*      Private Method delaying sortAndFilter until it's no longer called     */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate delayUntilNoLongerCalled(callback: () => void) {\n\t\tlet timeoutId: number;\n\t\tlet isCalling = false;\n\n\t\tfunction delayedCallback() {\n\t\t\t// Execute the callback\n\t\t\tcallback();\n\n\t\t\t// Reset the flag variable to false\n\t\t\tisCalling = false;\n\t\t}\n\n\t\treturn function () {\n\t\t\t// If the function is already being called, clear the previous timeout\n\t\t\tif (isCalling) {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t} else {\n\t\t\t\t// Set the flag variable to true if the function is not already being called\n\t\t\t\tisCalling = true;\n\t\t\t}\n\n\t\t\t// Set a new timeout to execute the delayed callback after 10ms\n\t\t\ttimeoutId = setTimeout(delayedCallback, 10);\n\t\t};\n\t}\n\n\t/* ------------------------- Delayed Sort and Filter ------------------------ */\n\n\tprivate sortAndFilter = this.delayUntilNoLongerCalled(() => {\n\t\tconsole.log(\"🎲 sortAndFilter\");\n\t\tthis.filterTable();\n\t\tthis.sortTable();\n\t\tthis.appendRows();\n\t\t// If tbody is hidden then this is the initial render\n\t\tif (this.tbody.matches(\"[style*=none]\")) {\n\t\t\t// if there are no rows then automatically reset filters\n\t\t\tif (this.rowsVisible === 0) {\n\t\t\t\tconsole.error(\"no results found on initial render\");\n\t\t\t\tthis.setFilters();\n\t\t\t\tthis.dispatchEvent(new Event(`action-table-filters-reset`));\n\t\t\t}\n\t\t\t// show tbody\n\t\t\tthis.tbody.style.display = \"\";\n\t\t}\n\t});\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                 Private Method: get columns from table                      */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate getColumns(): void {\n\t\tconsole.time(\"getColumns\");\n\t\t// 1. Get column headers\n\t\t// casting type as we know what it is from selector\n\t\tconst ths = this.table.querySelectorAll(\"thead th\") as NodeListOf<HTMLTableCellElement>;\n\n\t\tths.forEach((th) => {\n\t\t\t// 2. Column name is based on data-col attribute or results of getCellContent() function\n\t\t\tconst name = (th.dataset.col || this.getCellContent(th)).trim().toLowerCase();\n\t\t\tconst order = th.dataset.order ? th.dataset.order.split(\",\") : undefined;\n\n\t\t\t// 4. Add column name to cols array\n\t\t\tthis.cols.push({ name, order });\n\n\t\t\t// 5. if the column is sortable then wrap it in a button, and add aria\n\t\t\tif (!th.hasAttribute(\"no-sort\")) {\n\t\t\t\tconst button = document.createElement(\"button\");\n\t\t\t\tbutton.dataset.col = name;\n\t\t\t\tbutton.type = \"button\";\n\t\t\t\tbutton.innerHTML = th.innerHTML;\n\t\t\t\tth.replaceChildren(button);\n\t\t\t}\n\t\t});\n\n\t\t// 7. add colGroup unless it already exists\n\t\tif (!this.table.querySelector(\"colgroup\")) {\n\t\t\t// 7.1 create colgroup\n\t\t\tconst colGroup = document.createElement(\"colgroup\");\n\t\t\t// 7.2 add col for each column\n\t\t\tths.forEach(() => {\n\t\t\t\tconst col = document.createElement(\"col\");\n\t\t\t\tcolGroup.appendChild(col);\n\t\t\t});\n\t\t\t// 7.3 prepend colgroup\n\t\t\tthis.table.prepend(colGroup);\n\t\t}\n\t\t// console.log(\"action-table cols\", this.cols);\n\t\t// 8. Return cols array\n\t\tconsole.timeEnd(\"getColumns\");\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Private Method: get cell content                        */\n\t/* -------------------------------------------------------------------------- */\n\tprivate getCellContent(cell: HTMLTableCellElement | ActionCell): string {\n\t\t// 1. get cell content with innerText; set to empty string if null\n\t\tlet cellContent: string = (cell.textContent || \"\").trim();\n\n\t\t// 3. if there is no cell content then check...\n\t\tif (!cellContent) {\n\t\t\t// 3.1 if there is an svg then get title; otherwise return empty string\n\t\t\tconst svg = cell.querySelector(\"svg\");\n\t\t\tif (svg instanceof SVGElement) {\n\t\t\t\tcellContent = svg.querySelector(\"title\")?.textContent || cellContent;\n\t\t\t}\n\t\t\t// 3.2 if checkbox element then get value if checked\n\t\t\tconst checkbox = cell.querySelector(\"input[type=checkbox]\");\n\t\t\tif (checkbox instanceof HTMLInputElement && checkbox.checked) {\n\t\t\t\tcellContent = checkbox.value;\n\t\t\t\tif (\"actionTable\" in cell) {\n\t\t\t\t\t// this is needed so all row search ignores checkbox values\n\t\t\t\t\tcell.actionTable = { ...cell.actionTable, checked: true };\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 3.3 if custom element with shadowRoot then get text content from shadowRoot\n\t\t\tconst customElement = cell.querySelector(\":defined\");\n\t\t\tif (customElement?.shadowRoot) {\n\t\t\t\tcellContent = customElement.shadowRoot.textContent || cellContent;\n\t\t\t}\n\t\t}\n\n\t\treturn cellContent.trim();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Private Method Get Table Data                       */\n\t/* -------------------------------------------------------------------------- */\n\t/* ------- Get all table content as data for quicker sorting/filtering ------ */\n\n\tprivate getTableContent() {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.time(\"getTableContent\");\n\n\t\tthis.rows.forEach((row) => {\n\t\t\t// const rowObj: RowData = { node: row, columns: {} };\n\t\t\t// 1. grab all cells in the row\n\t\t\tconst cells = row.querySelectorAll(\"td\") as NodeListOf<ActionCell>;\n\t\t\tcells.forEach((cell, i) => {\n\t\t\t\t// 1. get matching column name\n\t\t\t\tconst col = this.cols[i];\n\t\t\t\tthis.setCellContent(cell, { col: col.name });\n\t\t\t});\n\t\t});\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.timeEnd(\"getTableContent\");\n\t}\n\n\t/* ------------------------------------------------------------------------- */\n\t/*              Private Method: Set Cell Content in td attribute              */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate setCellContent(cell: ActionCell, update: { col?: string; sort?: string; filter?: string } = {}) {\n\t\tconst cellContent = this.getCellContent(cell);\n\t\tcell.actionTable = { ...cell.actionTable, sort: cell.dataset.sort || cellContent, filter: cell.dataset.filter || cellContent, ...update };\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Private Method: Add Observer                        */\n\t/* -------------------------------------------------------------------------- */\n\n\tprivate addObserver() {\n\t\t// Good reference for MutationObserver: https://davidwalsh.name/mutationobserver-api\n\t\t// 1. Create an observer instance\n\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\t// Make sure it only gets content once if there are several changes at the same time\n\t\t\t// 1.1 sort through all mutations\n\t\t\tmutations.forEach((mutation) => {\n\t\t\t\tlet target = mutation.target;\n\t\t\t\t// If target is a text node, get its parentNode\n\t\t\t\tif (target.nodeType === 3 && target.parentNode) target = target.parentNode;\n\t\t\t\t// ignore if this is not an HTMLElement\n\t\t\t\tif (!(target instanceof HTMLElement)) return;\n\t\t\t\t// Get parent td\n\t\t\t\tconst td = target.closest(\"td\");\n\t\t\t\t// Only act on HTMLTableCellElements\n\t\t\t\tif (td instanceof HTMLTableCellElement) {\n\t\t\t\t\t// If this is a contenteditable element that is focused then only update on blur\n\t\t\t\t\tif (td.hasAttribute(\"contenteditable\") && td === document.activeElement) {\n\t\t\t\t\t\t// add function for event listener\n\t\t\t\t\t\t// Make sure that the event listener is only added once\n\t\t\t\t\t\tif (!td.dataset.edit) {\n\t\t\t\t\t\t\ttd.dataset.edit = \"true\";\n\t\t\t\t\t\t\ttd.addEventListener(\"blur\", () => this.updateContent(td));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// else update\n\t\t\t\t\t\tthis.updateContent(td);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Ignore tbody changes which happens whenever a new row is added with sort\n\t\t\t});\n\t\t});\n\t\tobserver.observe(this.tbody, { childList: true, subtree: true, attributes: true, characterData: true, attributeFilter: [\"data-sort\", \"data-filter\"] });\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*            Private Method: filter table on column name and value            */\n\t/* -------------------------------------------------------------------------- */\n\t/* ------------- Used by filters in action-table-filter element ------------- */\n\t/* ------------- Also triggered by local storage and URL params ------------- */\n\n\tprivate filterTable(): void {\n\t\tconsole.log(\"filterTable\", this.filters);\n\n\t\t// eslint-disable-next-line no-console\n\t\t// console.time(\"filterTable\");\n\n\t\t// 1. Save current state of numberOfPages\n\t\tconst currentNumberOfPages = this.numberOfPages;\n\t\tconst currentRowsVisible = this.rowsVisible;\n\n\t\t// 2. get filter value for whole row based on special reserved name \"action-table\"\n\t\tconst filterForWholeRow = this.filters[\"action-table\"];\n\n\t\tthis.rows.forEach((row) => {\n\t\t\t// 3.1 set base display value as \"\"\n\t\t\tlet hide = false;\n\t\t\t// 3.2 get td cells\n\t\t\tconst cells = row.querySelectorAll(\"td\") as NodeListOf<ActionCell>;\n\t\t\t// 3.3 if filter value for whole row exists then run filter against innerText of entire row content\n\t\t\tif (filterForWholeRow) {\n\t\t\t\t// 3.3.1 build string of all td data-filter values, ignoring checkboxes\n\t\t\t\tconst content = Array.from(cells)\n\t\t\t\t\t.map((cell) => (cell.actionTable.checked ? \"\" : cell.actionTable.filter))\n\t\t\t\t\t.join(\" \");\n\n\t\t\t\tif (this.shouldHide(filterForWholeRow, content)) {\n\t\t\t\t\thide = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 3.4 if columnName is not action-table then run filter against td cell content\n\t\t\tcells.forEach((cell, i) => {\n\t\t\t\tconst filter = this.filters[this.cols[i].name];\n\t\t\t\tif (!filter) return;\n\n\t\t\t\tif (this.shouldHide(filter, cell.actionTable.filter)) {\n\t\t\t\t\thide = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// 3.5 set display\n\t\t\trow.hideRow = hide;\n\t\t});\n\n\t\t// 4. If number of pages changed, update pagination\n\t\tconsole.log(\"currentNumberOfPages\", currentNumberOfPages, this.numberOfPages);\n\n\t\tif (this.numberOfPages !== currentNumberOfPages) {\n\t\t\tthis.dispatch({ numberOfPages: this.numberOfPages });\n\t\t}\n\t\tif (this.rowsVisible !== currentRowsVisible) {\n\t\t\tthis.dispatch({ rowsVisible: this.rowsVisible });\n\t\t}\n\t\t// console.timeEnd(\"filterTable\");\n\t}\n\n\tprivate shouldHide(filter: SingleFilterObject, content: string): boolean {\n\t\t// console.log(\"shouldHide\", filter, content);\n\t\tif (filter.values && filter.values.length > 0) {\n\t\t\t// 1. build regex from filterValues array (checkboxes and select menus send arrays)\n\t\t\tif (filter.regex) {\n\t\t\t\tlet regexPattern = filter.values.join(\"|\");\n\t\t\t\tif (filter.exclusive) {\n\t\t\t\t\tconst regexParts = filter.values.map((str) => `(?=.*${str})`);\n\t\t\t\t\tregexPattern = `${regexParts.join(\"\")}.*`;\n\t\t\t\t}\n\t\t\t\tconst regex = new RegExp(regexPattern, \"i\");\n\n\t\t\t\t// 2. check if content matches\n\t\t\t\treturn !regex.test(content);\n\t\t\t}\n\t\t\tif (filter.range) {\n\t\t\t\tconst [min, max] = filter.values;\n\t\t\t\t// TODO: Maybe allow for alphabetical ranges?\n\t\t\t\tif (!isNaN(Number(min)) && !isNaN(Number(max))) return Number(content) < Number(min) || Number(content) > Number(max);\n\t\t\t}\n\t\t\t// console.log(\"show\", columnName, content);\n\t\t\tif (filter.exclusive) {\n\t\t\t\treturn !filter.values.every((v) => content.toLowerCase().includes(v.toLowerCase()));\n\t\t\t}\n\t\t\tif (filter.exact) {\n\t\t\t\treturn filter.values.every((v) => v && v !== content);\n\t\t\t}\n\t\t\treturn !filter.values.some((v) => content.toLowerCase().includes(v.toLowerCase()));\n\t\t}\n\t\treturn false;\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*        Private Method: sort table based on column name and direction        */\n\t/* -------------------------------------------------------------------------- */\n\t/* ----------- Used by sort header buttons and attributes callback ----------- */\n\t/* ------------- Also triggered by local storage and URL params ------------- */\n\n\tprivate sortTable(columnName = this.sort, direction = this.direction) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.time(\"sortTable\");\n\t\tcolumnName = columnName.toLowerCase();\n\t\t// 1. Get column index from column name\n\t\tconst columnIndex = this.cols.findIndex((col) => col.name === columnName);\n\n\t\t// 2. If column exists and there are rows then sort\n\t\tif (columnIndex >= 0 && this.rows.length > 0) {\n\t\t\tconsole.log(`sort by ${columnName} ${direction}`);\n\n\t\t\t// 1 Get sort order for column if it exists\n\t\t\tconst sortOrder = this.cols[columnIndex].order;\n\t\t\t// helper function to return sort order index for row sort\n\t\t\tconst checkSortOrder = (value: string) => {\n\t\t\t\treturn sortOrder?.includes(value) ? sortOrder.indexOf(value).toString() : value;\n\t\t\t};\n\n\t\t\t// 2. Sort rows\n\t\t\tthis.rows.sort((r1, r2) => {\n\t\t\t\t// 1. If descending sort, swap rows\n\t\t\t\tif (this.direction === \"descending\") {\n\t\t\t\t\tconst temp = r1;\n\t\t\t\t\tr1 = r2;\n\t\t\t\t\tr2 = temp;\n\t\t\t\t}\n\n\t\t\t\t// 2. Get content from stored actionTable.sort; If it matches value in sort order exists then return index\n\t\t\t\tconst a: string = checkSortOrder((r1.children[columnIndex] as ActionCell).actionTable.sort);\n\t\t\t\tconst b: string = checkSortOrder((r2.children[columnIndex] as ActionCell).actionTable.sort);\n\n\t\t\t\treturn this.alphaNumSort(a, b);\n\t\t\t});\n\n\t\t\t// 3. Add sorted class to columns\n\t\t\tconst colGroupCols = this.querySelectorAll(\"col\");\n\t\t\tcolGroupCols.forEach((colGroupCol, i) => {\n\t\t\t\tif (i === columnIndex) {\n\t\t\t\t\tcolGroupCol.classList.add(\"sorted\");\n\t\t\t\t} else {\n\t\t\t\t\tcolGroupCol.classList.remove(\"sorted\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// 3. set aria sorting direction\n\t\t\tconst ths = this.table.querySelectorAll(\"thead th\");\n\t\t\tths.forEach((th, i) => {\n\t\t\t\tconst ariaSort = i === columnIndex ? direction : \"none\";\n\t\t\t\tth.setAttribute(\"aria-sort\", ariaSort);\n\t\t\t});\n\t\t}\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.timeEnd(\"sortTable\");\n\t}\n\n\t/* --------------------------- Public Sort Method --------------------------- */\n\t// Also used by action-table-filter-menu.js when building options menu\n\n\tpublic alphaNumSort(a: string, b: string): number {\n\t\tfunction isNumberOrDate(value: string): number | void {\n\t\t\tif (!isNaN(Number(value))) {\n\t\t\t\treturn Number(value);\n\t\t\t} else if (!isNaN(Date.parse(value))) {\n\t\t\t\treturn Date.parse(value);\n\t\t\t}\n\t\t}\n\n\t\tconst aSort = isNumberOrDate(a);\n\t\tconst bSort = isNumberOrDate(b);\n\n\t\tif (aSort && bSort) {\n\t\t\treturn aSort - bSort;\n\t\t}\n\t\treturn a.localeCompare(b);\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                         Private Method: Append Rows                        */\n\t/* -------------------------------------------------------------------------- */\n\t/* --------- Sets row visibility based on sort,filter and pagination -------- */\n\n\tprivate appendRows(): void {\n\t\t// console.time(\"appendRows\");\n\n\t\t// Helper function for hiding rows based on pagination\n\t\tconst isActivePage = (i: number): boolean => {\n\t\t\t// returns if pagination is enabled (> 0) and row is on current page.\n\t\t\t// For instance if the current page is 2 and pagination is 10 then is greater than 10 and less than or equal to 20\n\t\t\tconst { pagination, page } = this;\n\t\t\treturn pagination === 0 || (i >= pagination * (page - 1) + 1 && i <= pagination * page);\n\t\t};\n\n\t\t// fragment for holding rows\n\t\tconst fragment = document.createDocumentFragment();\n\t\t// This includes both rows hidden by filter and by pagination\n\t\tlet currentRowsVisible = 0;\n\n\t\t// loop through rows to set hide or show\n\t\tthis.rows.forEach((row) => {\n\t\t\tlet display = \"none\";\n\t\t\t// if row not hidden by filter\n\t\t\tif (!row.hideRow) {\n\t\t\t\t// increment current rows\n\t\t\t\tcurrentRowsVisible++;\n\t\t\t\t// if row not hidden by pagination\n\t\t\t\tif (isActivePage(currentRowsVisible)) {\n\t\t\t\t\t// set display to show and add row to fragment\n\t\t\t\t\tdisplay = \"\";\n\t\t\t\t\tfragment.appendChild(row);\n\t\t\t\t}\n\t\t\t}\n\t\t\trow.style.display = display;\n\t\t});\n\n\t\t// prepend fragment to tbody\n\n\t\tthis.tbody.prepend(fragment);\n\n\t\t// console.timeEnd(\"appendRows\");\n\n\t\tif (this.pagination > 0) {\n\t\t\t// If page is greater than number of pages, set page to number of pages\n\t\t\tconst page = this.checkPage(this.page);\n\t\t\tif (page !== this.page) {\n\t\t\t\t// update this.page\n\t\t\t\tthis.page = page;\n\t\t\t\t// Dispatch current page\n\t\t\t\tthis.dispatch({ page: page });\n\t\t\t}\n\t\t}\n\t}\n\n\tget rowsVisible(): number {\n\t\treturn this.rows.filter((row) => !row.hideRow).length;\n\t}\n\n\tget numberOfPages(): number {\n\t\treturn this.pagination > 0 ? Math.ceil(this.rowsVisible / this.pagination) : 1;\n\t}\n}\n\ncustomElements.define(\"action-table\", ActionTable);\n"],"names":["ActionTableNoResults","actionTable","rowsVisible","detail","ActionTable","_a","__publicField","lsActionTable","params","filters","key","value","direction","page","attr","table","hasFilters","col","name","oldValue","newValue","event","el","target","ls","data","lsData","update","cell","callback","timeoutId","isCalling","delayedCallback","ths","th","order","button","colGroup","cellContent","svg","checkbox","customElement","row","mutations","mutation","td","currentNumberOfPages","currentRowsVisible","filterForWholeRow","hide","cells","content","i","filter","regexPattern","str","min","max","v","columnName","columnIndex","sortOrder","checkSortOrder","r1","r2","temp","a","b","colGroupCol","ariaSort","isNumberOrDate","aSort","bSort","isActivePage","pagination","fragment","display"],"mappings":"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"}